
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model ingredients_table
 * 
 */
export type ingredients_table = {
  name: string | null
  itemid: number
  num_in_stock: number | null
  last_date_restocked: Date | null
  min_stock_allowed: number | null
}

/**
 * Model menu_items_table
 * 
 */
export type menu_items_table = {
  foodid: number
  name: string | null
  price: number | null
  category: string | null
  num_sold: number | null
  num_in_stock: number | null
  min_in_stock: number | null
}

/**
 * Model relationss
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type relationss = {
  foodid: number
  itemid: number | null
}

/**
 * Model reports
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type reports = {
  foodid: number
  name: string
  number_sold: number
  inventory: number
  date: Date | null
}

/**
 * Model sales
 * 
 */
export type sales = {
  itemid: number
  units_sold: number | null
  cost_per_unit: number | null
  revenue_per_unit: number | null
  weight_per_unit: number | null
  name: string | null
}

/**
 * Model teammembers
 * 
 */
export type teammembers = {
  student_name: string
  section: number | null
  favorite_movie: string | null
}

/**
 * Model menuimages
 * 
 */
export type menuimages = {
  foodid: number
  imagesrc: string | null
  name: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Ingredients_tables
 * const ingredients_tables = await prisma.ingredients_table.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Ingredients_tables
   * const ingredients_tables = await prisma.ingredients_table.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.ingredients_table`: Exposes CRUD operations for the **ingredients_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients_tables
    * const ingredients_tables = await prisma.ingredients_table.findMany()
    * ```
    */
  get ingredients_table(): Prisma.ingredients_tableDelegate<GlobalReject>;

  /**
   * `prisma.menu_items_table`: Exposes CRUD operations for the **menu_items_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menu_items_tables
    * const menu_items_tables = await prisma.menu_items_table.findMany()
    * ```
    */
  get menu_items_table(): Prisma.menu_items_tableDelegate<GlobalReject>;

  /**
   * `prisma.relationss`: Exposes CRUD operations for the **relationss** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relationsses
    * const relationsses = await prisma.relationss.findMany()
    * ```
    */
  get relationss(): Prisma.relationssDelegate<GlobalReject>;

  /**
   * `prisma.reports`: Exposes CRUD operations for the **reports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.reports.findMany()
    * ```
    */
  get reports(): Prisma.reportsDelegate<GlobalReject>;

  /**
   * `prisma.sales`: Exposes CRUD operations for the **sales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sales.findMany()
    * ```
    */
  get sales(): Prisma.salesDelegate<GlobalReject>;

  /**
   * `prisma.teammembers`: Exposes CRUD operations for the **teammembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teammembers
    * const teammembers = await prisma.teammembers.findMany()
    * ```
    */
  get teammembers(): Prisma.teammembersDelegate<GlobalReject>;

  /**
   * `prisma.menuimages`: Exposes CRUD operations for the **menuimages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menuimages
    * const menuimages = await prisma.menuimages.findMany()
    * ```
    */
  get menuimages(): Prisma.menuimagesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ingredients_table: 'ingredients_table',
    menu_items_table: 'menu_items_table',
    relationss: 'relationss',
    reports: 'reports',
    sales: 'sales',
    teammembers: 'teammembers',
    menuimages: 'menuimages'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ingredients_table
   */


  export type AggregateIngredients_table = {
    _count: Ingredients_tableCountAggregateOutputType | null
    _avg: Ingredients_tableAvgAggregateOutputType | null
    _sum: Ingredients_tableSumAggregateOutputType | null
    _min: Ingredients_tableMinAggregateOutputType | null
    _max: Ingredients_tableMaxAggregateOutputType | null
  }

  export type Ingredients_tableAvgAggregateOutputType = {
    itemid: number | null
    num_in_stock: number | null
    min_stock_allowed: number | null
  }

  export type Ingredients_tableSumAggregateOutputType = {
    itemid: number | null
    num_in_stock: number | null
    min_stock_allowed: number | null
  }

  export type Ingredients_tableMinAggregateOutputType = {
    name: string | null
    itemid: number | null
    num_in_stock: number | null
    last_date_restocked: Date | null
    min_stock_allowed: number | null
  }

  export type Ingredients_tableMaxAggregateOutputType = {
    name: string | null
    itemid: number | null
    num_in_stock: number | null
    last_date_restocked: Date | null
    min_stock_allowed: number | null
  }

  export type Ingredients_tableCountAggregateOutputType = {
    name: number
    itemid: number
    num_in_stock: number
    last_date_restocked: number
    min_stock_allowed: number
    _all: number
  }


  export type Ingredients_tableAvgAggregateInputType = {
    itemid?: true
    num_in_stock?: true
    min_stock_allowed?: true
  }

  export type Ingredients_tableSumAggregateInputType = {
    itemid?: true
    num_in_stock?: true
    min_stock_allowed?: true
  }

  export type Ingredients_tableMinAggregateInputType = {
    name?: true
    itemid?: true
    num_in_stock?: true
    last_date_restocked?: true
    min_stock_allowed?: true
  }

  export type Ingredients_tableMaxAggregateInputType = {
    name?: true
    itemid?: true
    num_in_stock?: true
    last_date_restocked?: true
    min_stock_allowed?: true
  }

  export type Ingredients_tableCountAggregateInputType = {
    name?: true
    itemid?: true
    num_in_stock?: true
    last_date_restocked?: true
    min_stock_allowed?: true
    _all?: true
  }

  export type Ingredients_tableAggregateArgs = {
    /**
     * Filter which ingredients_table to aggregate.
     */
    where?: ingredients_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients_tables to fetch.
     */
    orderBy?: Enumerable<ingredients_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ingredients_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ingredients_tables
    **/
    _count?: true | Ingredients_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ingredients_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ingredients_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ingredients_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ingredients_tableMaxAggregateInputType
  }

  export type GetIngredients_tableAggregateType<T extends Ingredients_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredients_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredients_table[P]>
      : GetScalarType<T[P], AggregateIngredients_table[P]>
  }




  export type Ingredients_tableGroupByArgs = {
    where?: ingredients_tableWhereInput
    orderBy?: Enumerable<ingredients_tableOrderByWithAggregationInput>
    by: Ingredients_tableScalarFieldEnum[]
    having?: ingredients_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ingredients_tableCountAggregateInputType | true
    _avg?: Ingredients_tableAvgAggregateInputType
    _sum?: Ingredients_tableSumAggregateInputType
    _min?: Ingredients_tableMinAggregateInputType
    _max?: Ingredients_tableMaxAggregateInputType
  }


  export type Ingredients_tableGroupByOutputType = {
    name: string | null
    itemid: number
    num_in_stock: number | null
    last_date_restocked: Date | null
    min_stock_allowed: number | null
    _count: Ingredients_tableCountAggregateOutputType | null
    _avg: Ingredients_tableAvgAggregateOutputType | null
    _sum: Ingredients_tableSumAggregateOutputType | null
    _min: Ingredients_tableMinAggregateOutputType | null
    _max: Ingredients_tableMaxAggregateOutputType | null
  }

  type GetIngredients_tableGroupByPayload<T extends Ingredients_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Ingredients_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ingredients_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ingredients_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Ingredients_tableGroupByOutputType[P]>
        }
      >
    >


  export type ingredients_tableSelect = {
    name?: boolean
    itemid?: boolean
    num_in_stock?: boolean
    last_date_restocked?: boolean
    min_stock_allowed?: boolean
  }


  export type ingredients_tableGetPayload<S extends boolean | null | undefined | ingredients_tableArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ingredients_table :
    S extends undefined ? never :
    S extends { include: any } & (ingredients_tableArgs | ingredients_tableFindManyArgs)
    ? ingredients_table 
    : S extends { select: any } & (ingredients_tableArgs | ingredients_tableFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ingredients_table ? ingredients_table[P] : never
  } 
      : ingredients_table


  type ingredients_tableCountArgs = 
    Omit<ingredients_tableFindManyArgs, 'select' | 'include'> & {
      select?: Ingredients_tableCountAggregateInputType | true
    }

  export interface ingredients_tableDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ingredients_table that matches the filter.
     * @param {ingredients_tableFindUniqueArgs} args - Arguments to find a Ingredients_table
     * @example
     * // Get one Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ingredients_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ingredients_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ingredients_table'> extends True ? Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>> : Prisma__ingredients_tableClient<ingredients_tableGetPayload<T> | null, null>

    /**
     * Find one Ingredients_table that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ingredients_tableFindUniqueOrThrowArgs} args - Arguments to find a Ingredients_table
     * @example
     * // Get one Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ingredients_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ingredients_tableFindUniqueOrThrowArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Find the first Ingredients_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredients_tableFindFirstArgs} args - Arguments to find a Ingredients_table
     * @example
     * // Get one Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ingredients_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ingredients_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ingredients_table'> extends True ? Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>> : Prisma__ingredients_tableClient<ingredients_tableGetPayload<T> | null, null>

    /**
     * Find the first Ingredients_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredients_tableFindFirstOrThrowArgs} args - Arguments to find a Ingredients_table
     * @example
     * // Get one Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ingredients_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ingredients_tableFindFirstOrThrowArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Find zero or more Ingredients_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredients_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients_tables
     * const ingredients_tables = await prisma.ingredients_table.findMany()
     * 
     * // Get first 10 Ingredients_tables
     * const ingredients_tables = await prisma.ingredients_table.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const ingredients_tableWithNameOnly = await prisma.ingredients_table.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends ingredients_tableFindManyArgs>(
      args?: SelectSubset<T, ingredients_tableFindManyArgs>
    ): Prisma.PrismaPromise<Array<ingredients_tableGetPayload<T>>>

    /**
     * Create a Ingredients_table.
     * @param {ingredients_tableCreateArgs} args - Arguments to create a Ingredients_table.
     * @example
     * // Create one Ingredients_table
     * const Ingredients_table = await prisma.ingredients_table.create({
     *   data: {
     *     // ... data to create a Ingredients_table
     *   }
     * })
     * 
    **/
    create<T extends ingredients_tableCreateArgs>(
      args: SelectSubset<T, ingredients_tableCreateArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Create many Ingredients_tables.
     *     @param {ingredients_tableCreateManyArgs} args - Arguments to create many Ingredients_tables.
     *     @example
     *     // Create many Ingredients_tables
     *     const ingredients_table = await prisma.ingredients_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ingredients_tableCreateManyArgs>(
      args?: SelectSubset<T, ingredients_tableCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredients_table.
     * @param {ingredients_tableDeleteArgs} args - Arguments to delete one Ingredients_table.
     * @example
     * // Delete one Ingredients_table
     * const Ingredients_table = await prisma.ingredients_table.delete({
     *   where: {
     *     // ... filter to delete one Ingredients_table
     *   }
     * })
     * 
    **/
    delete<T extends ingredients_tableDeleteArgs>(
      args: SelectSubset<T, ingredients_tableDeleteArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Update one Ingredients_table.
     * @param {ingredients_tableUpdateArgs} args - Arguments to update one Ingredients_table.
     * @example
     * // Update one Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ingredients_tableUpdateArgs>(
      args: SelectSubset<T, ingredients_tableUpdateArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Delete zero or more Ingredients_tables.
     * @param {ingredients_tableDeleteManyArgs} args - Arguments to filter Ingredients_tables to delete.
     * @example
     * // Delete a few Ingredients_tables
     * const { count } = await prisma.ingredients_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ingredients_tableDeleteManyArgs>(
      args?: SelectSubset<T, ingredients_tableDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredients_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients_tables
     * const ingredients_table = await prisma.ingredients_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ingredients_tableUpdateManyArgs>(
      args: SelectSubset<T, ingredients_tableUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredients_table.
     * @param {ingredients_tableUpsertArgs} args - Arguments to update or create a Ingredients_table.
     * @example
     * // Update or create a Ingredients_table
     * const ingredients_table = await prisma.ingredients_table.upsert({
     *   create: {
     *     // ... data to create a Ingredients_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredients_table we want to update
     *   }
     * })
    **/
    upsert<T extends ingredients_tableUpsertArgs>(
      args: SelectSubset<T, ingredients_tableUpsertArgs>
    ): Prisma__ingredients_tableClient<ingredients_tableGetPayload<T>>

    /**
     * Count the number of Ingredients_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredients_tableCountArgs} args - Arguments to filter Ingredients_tables to count.
     * @example
     * // Count the number of Ingredients_tables
     * const count = await prisma.ingredients_table.count({
     *   where: {
     *     // ... the filter for the Ingredients_tables we want to count
     *   }
     * })
    **/
    count<T extends ingredients_tableCountArgs>(
      args?: Subset<T, ingredients_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ingredients_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredients_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ingredients_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ingredients_tableAggregateArgs>(args: Subset<T, Ingredients_tableAggregateArgs>): Prisma.PrismaPromise<GetIngredients_tableAggregateType<T>>

    /**
     * Group by Ingredients_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ingredients_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Ingredients_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Ingredients_tableGroupByArgs['orderBy'] }
        : { orderBy?: Ingredients_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Ingredients_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredients_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ingredients_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ingredients_tableClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ingredients_table base type for findUnique actions
   */
  export type ingredients_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter, which ingredients_table to fetch.
     */
    where: ingredients_tableWhereUniqueInput
  }

  /**
   * ingredients_table findUnique
   */
  export interface ingredients_tableFindUniqueArgs extends ingredients_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ingredients_table findUniqueOrThrow
   */
  export type ingredients_tableFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter, which ingredients_table to fetch.
     */
    where: ingredients_tableWhereUniqueInput
  }


  /**
   * ingredients_table base type for findFirst actions
   */
  export type ingredients_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter, which ingredients_table to fetch.
     */
    where?: ingredients_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients_tables to fetch.
     */
    orderBy?: Enumerable<ingredients_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredients_tables.
     */
    cursor?: ingredients_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredients_tables.
     */
    distinct?: Enumerable<Ingredients_tableScalarFieldEnum>
  }

  /**
   * ingredients_table findFirst
   */
  export interface ingredients_tableFindFirstArgs extends ingredients_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ingredients_table findFirstOrThrow
   */
  export type ingredients_tableFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter, which ingredients_table to fetch.
     */
    where?: ingredients_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients_tables to fetch.
     */
    orderBy?: Enumerable<ingredients_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredients_tables.
     */
    cursor?: ingredients_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredients_tables.
     */
    distinct?: Enumerable<Ingredients_tableScalarFieldEnum>
  }


  /**
   * ingredients_table findMany
   */
  export type ingredients_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter, which ingredients_tables to fetch.
     */
    where?: ingredients_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients_tables to fetch.
     */
    orderBy?: Enumerable<ingredients_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ingredients_tables.
     */
    cursor?: ingredients_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients_tables.
     */
    skip?: number
    distinct?: Enumerable<Ingredients_tableScalarFieldEnum>
  }


  /**
   * ingredients_table create
   */
  export type ingredients_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * The data needed to create a ingredients_table.
     */
    data: XOR<ingredients_tableCreateInput, ingredients_tableUncheckedCreateInput>
  }


  /**
   * ingredients_table createMany
   */
  export type ingredients_tableCreateManyArgs = {
    /**
     * The data used to create many ingredients_tables.
     */
    data: Enumerable<ingredients_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ingredients_table update
   */
  export type ingredients_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * The data needed to update a ingredients_table.
     */
    data: XOR<ingredients_tableUpdateInput, ingredients_tableUncheckedUpdateInput>
    /**
     * Choose, which ingredients_table to update.
     */
    where: ingredients_tableWhereUniqueInput
  }


  /**
   * ingredients_table updateMany
   */
  export type ingredients_tableUpdateManyArgs = {
    /**
     * The data used to update ingredients_tables.
     */
    data: XOR<ingredients_tableUpdateManyMutationInput, ingredients_tableUncheckedUpdateManyInput>
    /**
     * Filter which ingredients_tables to update
     */
    where?: ingredients_tableWhereInput
  }


  /**
   * ingredients_table upsert
   */
  export type ingredients_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * The filter to search for the ingredients_table to update in case it exists.
     */
    where: ingredients_tableWhereUniqueInput
    /**
     * In case the ingredients_table found by the `where` argument doesn't exist, create a new ingredients_table with this data.
     */
    create: XOR<ingredients_tableCreateInput, ingredients_tableUncheckedCreateInput>
    /**
     * In case the ingredients_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ingredients_tableUpdateInput, ingredients_tableUncheckedUpdateInput>
  }


  /**
   * ingredients_table delete
   */
  export type ingredients_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
    /**
     * Filter which ingredients_table to delete.
     */
    where: ingredients_tableWhereUniqueInput
  }


  /**
   * ingredients_table deleteMany
   */
  export type ingredients_tableDeleteManyArgs = {
    /**
     * Filter which ingredients_tables to delete
     */
    where?: ingredients_tableWhereInput
  }


  /**
   * ingredients_table without action
   */
  export type ingredients_tableArgs = {
    /**
     * Select specific fields to fetch from the ingredients_table
     */
    select?: ingredients_tableSelect | null
  }



  /**
   * Model menu_items_table
   */


  export type AggregateMenu_items_table = {
    _count: Menu_items_tableCountAggregateOutputType | null
    _avg: Menu_items_tableAvgAggregateOutputType | null
    _sum: Menu_items_tableSumAggregateOutputType | null
    _min: Menu_items_tableMinAggregateOutputType | null
    _max: Menu_items_tableMaxAggregateOutputType | null
  }

  export type Menu_items_tableAvgAggregateOutputType = {
    foodid: number | null
    price: number | null
    num_sold: number | null
    num_in_stock: number | null
    min_in_stock: number | null
  }

  export type Menu_items_tableSumAggregateOutputType = {
    foodid: number | null
    price: number | null
    num_sold: number | null
    num_in_stock: number | null
    min_in_stock: number | null
  }

  export type Menu_items_tableMinAggregateOutputType = {
    foodid: number | null
    name: string | null
    price: number | null
    category: string | null
    num_sold: number | null
    num_in_stock: number | null
    min_in_stock: number | null
  }

  export type Menu_items_tableMaxAggregateOutputType = {
    foodid: number | null
    name: string | null
    price: number | null
    category: string | null
    num_sold: number | null
    num_in_stock: number | null
    min_in_stock: number | null
  }

  export type Menu_items_tableCountAggregateOutputType = {
    foodid: number
    name: number
    price: number
    category: number
    num_sold: number
    num_in_stock: number
    min_in_stock: number
    _all: number
  }


  export type Menu_items_tableAvgAggregateInputType = {
    foodid?: true
    price?: true
    num_sold?: true
    num_in_stock?: true
    min_in_stock?: true
  }

  export type Menu_items_tableSumAggregateInputType = {
    foodid?: true
    price?: true
    num_sold?: true
    num_in_stock?: true
    min_in_stock?: true
  }

  export type Menu_items_tableMinAggregateInputType = {
    foodid?: true
    name?: true
    price?: true
    category?: true
    num_sold?: true
    num_in_stock?: true
    min_in_stock?: true
  }

  export type Menu_items_tableMaxAggregateInputType = {
    foodid?: true
    name?: true
    price?: true
    category?: true
    num_sold?: true
    num_in_stock?: true
    min_in_stock?: true
  }

  export type Menu_items_tableCountAggregateInputType = {
    foodid?: true
    name?: true
    price?: true
    category?: true
    num_sold?: true
    num_in_stock?: true
    min_in_stock?: true
    _all?: true
  }

  export type Menu_items_tableAggregateArgs = {
    /**
     * Filter which menu_items_table to aggregate.
     */
    where?: menu_items_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_items_tables to fetch.
     */
    orderBy?: Enumerable<menu_items_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: menu_items_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_items_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_items_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned menu_items_tables
    **/
    _count?: true | Menu_items_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Menu_items_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Menu_items_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Menu_items_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Menu_items_tableMaxAggregateInputType
  }

  export type GetMenu_items_tableAggregateType<T extends Menu_items_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu_items_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu_items_table[P]>
      : GetScalarType<T[P], AggregateMenu_items_table[P]>
  }




  export type Menu_items_tableGroupByArgs = {
    where?: menu_items_tableWhereInput
    orderBy?: Enumerable<menu_items_tableOrderByWithAggregationInput>
    by: Menu_items_tableScalarFieldEnum[]
    having?: menu_items_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Menu_items_tableCountAggregateInputType | true
    _avg?: Menu_items_tableAvgAggregateInputType
    _sum?: Menu_items_tableSumAggregateInputType
    _min?: Menu_items_tableMinAggregateInputType
    _max?: Menu_items_tableMaxAggregateInputType
  }


  export type Menu_items_tableGroupByOutputType = {
    foodid: number
    name: string | null
    price: number | null
    category: string | null
    num_sold: number | null
    num_in_stock: number | null
    min_in_stock: number | null
    _count: Menu_items_tableCountAggregateOutputType | null
    _avg: Menu_items_tableAvgAggregateOutputType | null
    _sum: Menu_items_tableSumAggregateOutputType | null
    _min: Menu_items_tableMinAggregateOutputType | null
    _max: Menu_items_tableMaxAggregateOutputType | null
  }

  type GetMenu_items_tableGroupByPayload<T extends Menu_items_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Menu_items_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Menu_items_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Menu_items_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Menu_items_tableGroupByOutputType[P]>
        }
      >
    >


  export type menu_items_tableSelect = {
    foodid?: boolean
    name?: boolean
    price?: boolean
    category?: boolean
    num_sold?: boolean
    num_in_stock?: boolean
    min_in_stock?: boolean
  }


  export type menu_items_tableGetPayload<S extends boolean | null | undefined | menu_items_tableArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? menu_items_table :
    S extends undefined ? never :
    S extends { include: any } & (menu_items_tableArgs | menu_items_tableFindManyArgs)
    ? menu_items_table 
    : S extends { select: any } & (menu_items_tableArgs | menu_items_tableFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof menu_items_table ? menu_items_table[P] : never
  } 
      : menu_items_table


  type menu_items_tableCountArgs = 
    Omit<menu_items_tableFindManyArgs, 'select' | 'include'> & {
      select?: Menu_items_tableCountAggregateInputType | true
    }

  export interface menu_items_tableDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Menu_items_table that matches the filter.
     * @param {menu_items_tableFindUniqueArgs} args - Arguments to find a Menu_items_table
     * @example
     * // Get one Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends menu_items_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, menu_items_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'menu_items_table'> extends True ? Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>> : Prisma__menu_items_tableClient<menu_items_tableGetPayload<T> | null, null>

    /**
     * Find one Menu_items_table that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {menu_items_tableFindUniqueOrThrowArgs} args - Arguments to find a Menu_items_table
     * @example
     * // Get one Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends menu_items_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, menu_items_tableFindUniqueOrThrowArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Find the first Menu_items_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_items_tableFindFirstArgs} args - Arguments to find a Menu_items_table
     * @example
     * // Get one Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends menu_items_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, menu_items_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'menu_items_table'> extends True ? Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>> : Prisma__menu_items_tableClient<menu_items_tableGetPayload<T> | null, null>

    /**
     * Find the first Menu_items_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_items_tableFindFirstOrThrowArgs} args - Arguments to find a Menu_items_table
     * @example
     * // Get one Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends menu_items_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, menu_items_tableFindFirstOrThrowArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Find zero or more Menu_items_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_items_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menu_items_tables
     * const menu_items_tables = await prisma.menu_items_table.findMany()
     * 
     * // Get first 10 Menu_items_tables
     * const menu_items_tables = await prisma.menu_items_table.findMany({ take: 10 })
     * 
     * // Only select the `foodid`
     * const menu_items_tableWithFoodidOnly = await prisma.menu_items_table.findMany({ select: { foodid: true } })
     * 
    **/
    findMany<T extends menu_items_tableFindManyArgs>(
      args?: SelectSubset<T, menu_items_tableFindManyArgs>
    ): Prisma.PrismaPromise<Array<menu_items_tableGetPayload<T>>>

    /**
     * Create a Menu_items_table.
     * @param {menu_items_tableCreateArgs} args - Arguments to create a Menu_items_table.
     * @example
     * // Create one Menu_items_table
     * const Menu_items_table = await prisma.menu_items_table.create({
     *   data: {
     *     // ... data to create a Menu_items_table
     *   }
     * })
     * 
    **/
    create<T extends menu_items_tableCreateArgs>(
      args: SelectSubset<T, menu_items_tableCreateArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Create many Menu_items_tables.
     *     @param {menu_items_tableCreateManyArgs} args - Arguments to create many Menu_items_tables.
     *     @example
     *     // Create many Menu_items_tables
     *     const menu_items_table = await prisma.menu_items_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends menu_items_tableCreateManyArgs>(
      args?: SelectSubset<T, menu_items_tableCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menu_items_table.
     * @param {menu_items_tableDeleteArgs} args - Arguments to delete one Menu_items_table.
     * @example
     * // Delete one Menu_items_table
     * const Menu_items_table = await prisma.menu_items_table.delete({
     *   where: {
     *     // ... filter to delete one Menu_items_table
     *   }
     * })
     * 
    **/
    delete<T extends menu_items_tableDeleteArgs>(
      args: SelectSubset<T, menu_items_tableDeleteArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Update one Menu_items_table.
     * @param {menu_items_tableUpdateArgs} args - Arguments to update one Menu_items_table.
     * @example
     * // Update one Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends menu_items_tableUpdateArgs>(
      args: SelectSubset<T, menu_items_tableUpdateArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Delete zero or more Menu_items_tables.
     * @param {menu_items_tableDeleteManyArgs} args - Arguments to filter Menu_items_tables to delete.
     * @example
     * // Delete a few Menu_items_tables
     * const { count } = await prisma.menu_items_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends menu_items_tableDeleteManyArgs>(
      args?: SelectSubset<T, menu_items_tableDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menu_items_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_items_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menu_items_tables
     * const menu_items_table = await prisma.menu_items_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends menu_items_tableUpdateManyArgs>(
      args: SelectSubset<T, menu_items_tableUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu_items_table.
     * @param {menu_items_tableUpsertArgs} args - Arguments to update or create a Menu_items_table.
     * @example
     * // Update or create a Menu_items_table
     * const menu_items_table = await prisma.menu_items_table.upsert({
     *   create: {
     *     // ... data to create a Menu_items_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu_items_table we want to update
     *   }
     * })
    **/
    upsert<T extends menu_items_tableUpsertArgs>(
      args: SelectSubset<T, menu_items_tableUpsertArgs>
    ): Prisma__menu_items_tableClient<menu_items_tableGetPayload<T>>

    /**
     * Count the number of Menu_items_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_items_tableCountArgs} args - Arguments to filter Menu_items_tables to count.
     * @example
     * // Count the number of Menu_items_tables
     * const count = await prisma.menu_items_table.count({
     *   where: {
     *     // ... the filter for the Menu_items_tables we want to count
     *   }
     * })
    **/
    count<T extends menu_items_tableCountArgs>(
      args?: Subset<T, menu_items_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Menu_items_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu_items_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Menu_items_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Menu_items_tableAggregateArgs>(args: Subset<T, Menu_items_tableAggregateArgs>): Prisma.PrismaPromise<GetMenu_items_tableAggregateType<T>>

    /**
     * Group by Menu_items_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Menu_items_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Menu_items_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Menu_items_tableGroupByArgs['orderBy'] }
        : { orderBy?: Menu_items_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Menu_items_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenu_items_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for menu_items_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__menu_items_tableClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * menu_items_table base type for findUnique actions
   */
  export type menu_items_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter, which menu_items_table to fetch.
     */
    where: menu_items_tableWhereUniqueInput
  }

  /**
   * menu_items_table findUnique
   */
  export interface menu_items_tableFindUniqueArgs extends menu_items_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menu_items_table findUniqueOrThrow
   */
  export type menu_items_tableFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter, which menu_items_table to fetch.
     */
    where: menu_items_tableWhereUniqueInput
  }


  /**
   * menu_items_table base type for findFirst actions
   */
  export type menu_items_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter, which menu_items_table to fetch.
     */
    where?: menu_items_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_items_tables to fetch.
     */
    orderBy?: Enumerable<menu_items_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menu_items_tables.
     */
    cursor?: menu_items_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_items_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_items_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menu_items_tables.
     */
    distinct?: Enumerable<Menu_items_tableScalarFieldEnum>
  }

  /**
   * menu_items_table findFirst
   */
  export interface menu_items_tableFindFirstArgs extends menu_items_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menu_items_table findFirstOrThrow
   */
  export type menu_items_tableFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter, which menu_items_table to fetch.
     */
    where?: menu_items_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_items_tables to fetch.
     */
    orderBy?: Enumerable<menu_items_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menu_items_tables.
     */
    cursor?: menu_items_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_items_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_items_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menu_items_tables.
     */
    distinct?: Enumerable<Menu_items_tableScalarFieldEnum>
  }


  /**
   * menu_items_table findMany
   */
  export type menu_items_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter, which menu_items_tables to fetch.
     */
    where?: menu_items_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_items_tables to fetch.
     */
    orderBy?: Enumerable<menu_items_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing menu_items_tables.
     */
    cursor?: menu_items_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_items_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_items_tables.
     */
    skip?: number
    distinct?: Enumerable<Menu_items_tableScalarFieldEnum>
  }


  /**
   * menu_items_table create
   */
  export type menu_items_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * The data needed to create a menu_items_table.
     */
    data: XOR<menu_items_tableCreateInput, menu_items_tableUncheckedCreateInput>
  }


  /**
   * menu_items_table createMany
   */
  export type menu_items_tableCreateManyArgs = {
    /**
     * The data used to create many menu_items_tables.
     */
    data: Enumerable<menu_items_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * menu_items_table update
   */
  export type menu_items_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * The data needed to update a menu_items_table.
     */
    data: XOR<menu_items_tableUpdateInput, menu_items_tableUncheckedUpdateInput>
    /**
     * Choose, which menu_items_table to update.
     */
    where: menu_items_tableWhereUniqueInput
  }


  /**
   * menu_items_table updateMany
   */
  export type menu_items_tableUpdateManyArgs = {
    /**
     * The data used to update menu_items_tables.
     */
    data: XOR<menu_items_tableUpdateManyMutationInput, menu_items_tableUncheckedUpdateManyInput>
    /**
     * Filter which menu_items_tables to update
     */
    where?: menu_items_tableWhereInput
  }


  /**
   * menu_items_table upsert
   */
  export type menu_items_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * The filter to search for the menu_items_table to update in case it exists.
     */
    where: menu_items_tableWhereUniqueInput
    /**
     * In case the menu_items_table found by the `where` argument doesn't exist, create a new menu_items_table with this data.
     */
    create: XOR<menu_items_tableCreateInput, menu_items_tableUncheckedCreateInput>
    /**
     * In case the menu_items_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<menu_items_tableUpdateInput, menu_items_tableUncheckedUpdateInput>
  }


  /**
   * menu_items_table delete
   */
  export type menu_items_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
    /**
     * Filter which menu_items_table to delete.
     */
    where: menu_items_tableWhereUniqueInput
  }


  /**
   * menu_items_table deleteMany
   */
  export type menu_items_tableDeleteManyArgs = {
    /**
     * Filter which menu_items_tables to delete
     */
    where?: menu_items_tableWhereInput
  }


  /**
   * menu_items_table without action
   */
  export type menu_items_tableArgs = {
    /**
     * Select specific fields to fetch from the menu_items_table
     */
    select?: menu_items_tableSelect | null
  }



  /**
   * Model relationss
   */


  export type AggregateRelationss = {
    _count: RelationssCountAggregateOutputType | null
    _avg: RelationssAvgAggregateOutputType | null
    _sum: RelationssSumAggregateOutputType | null
    _min: RelationssMinAggregateOutputType | null
    _max: RelationssMaxAggregateOutputType | null
  }

  export type RelationssAvgAggregateOutputType = {
    foodid: number | null
    itemid: number | null
  }

  export type RelationssSumAggregateOutputType = {
    foodid: number | null
    itemid: number | null
  }

  export type RelationssMinAggregateOutputType = {
    foodid: number | null
    itemid: number | null
  }

  export type RelationssMaxAggregateOutputType = {
    foodid: number | null
    itemid: number | null
  }

  export type RelationssCountAggregateOutputType = {
    foodid: number
    itemid: number
    _all: number
  }


  export type RelationssAvgAggregateInputType = {
    foodid?: true
    itemid?: true
  }

  export type RelationssSumAggregateInputType = {
    foodid?: true
    itemid?: true
  }

  export type RelationssMinAggregateInputType = {
    foodid?: true
    itemid?: true
  }

  export type RelationssMaxAggregateInputType = {
    foodid?: true
    itemid?: true
  }

  export type RelationssCountAggregateInputType = {
    foodid?: true
    itemid?: true
    _all?: true
  }

  export type RelationssAggregateArgs = {
    /**
     * Filter which relationss to aggregate.
     */
    where?: relationssWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relationsses to fetch.
     */
    orderBy?: Enumerable<relationssOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: relationssWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relationsses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relationsses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned relationsses
    **/
    _count?: true | RelationssCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelationssAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelationssSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationssMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationssMaxAggregateInputType
  }

  export type GetRelationssAggregateType<T extends RelationssAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationss]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationss[P]>
      : GetScalarType<T[P], AggregateRelationss[P]>
  }




  export type RelationssGroupByArgs = {
    where?: relationssWhereInput
    orderBy?: Enumerable<relationssOrderByWithAggregationInput>
    by: RelationssScalarFieldEnum[]
    having?: relationssScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationssCountAggregateInputType | true
    _avg?: RelationssAvgAggregateInputType
    _sum?: RelationssSumAggregateInputType
    _min?: RelationssMinAggregateInputType
    _max?: RelationssMaxAggregateInputType
  }


  export type RelationssGroupByOutputType = {
    foodid: number
    itemid: number | null
    _count: RelationssCountAggregateOutputType | null
    _avg: RelationssAvgAggregateOutputType | null
    _sum: RelationssSumAggregateOutputType | null
    _min: RelationssMinAggregateOutputType | null
    _max: RelationssMaxAggregateOutputType | null
  }

  type GetRelationssGroupByPayload<T extends RelationssGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RelationssGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationssGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationssGroupByOutputType[P]>
            : GetScalarType<T[P], RelationssGroupByOutputType[P]>
        }
      >
    >


  export type relationssSelect = {
    foodid?: boolean
    itemid?: boolean
  }


  export type relationssGetPayload<S extends boolean | null | undefined | relationssArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? relationss :
    S extends undefined ? never :
    S extends { include: any } & (relationssArgs | relationssFindManyArgs)
    ? relationss 
    : S extends { select: any } & (relationssArgs | relationssFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof relationss ? relationss[P] : never
  } 
      : relationss


  type relationssCountArgs = 
    Omit<relationssFindManyArgs, 'select' | 'include'> & {
      select?: RelationssCountAggregateInputType | true
    }

  export interface relationssDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Relationss that matches the filter.
     * @param {relationssFindUniqueArgs} args - Arguments to find a Relationss
     * @example
     * // Get one Relationss
     * const relationss = await prisma.relationss.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends relationssFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, relationssFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'relationss'> extends True ? Prisma__relationssClient<relationssGetPayload<T>> : Prisma__relationssClient<relationssGetPayload<T> | null, null>

    /**
     * Find one Relationss that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {relationssFindUniqueOrThrowArgs} args - Arguments to find a Relationss
     * @example
     * // Get one Relationss
     * const relationss = await prisma.relationss.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends relationssFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, relationssFindUniqueOrThrowArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Find the first Relationss that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationssFindFirstArgs} args - Arguments to find a Relationss
     * @example
     * // Get one Relationss
     * const relationss = await prisma.relationss.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends relationssFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, relationssFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'relationss'> extends True ? Prisma__relationssClient<relationssGetPayload<T>> : Prisma__relationssClient<relationssGetPayload<T> | null, null>

    /**
     * Find the first Relationss that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationssFindFirstOrThrowArgs} args - Arguments to find a Relationss
     * @example
     * // Get one Relationss
     * const relationss = await prisma.relationss.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends relationssFindFirstOrThrowArgs>(
      args?: SelectSubset<T, relationssFindFirstOrThrowArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Find zero or more Relationsses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationssFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relationsses
     * const relationsses = await prisma.relationss.findMany()
     * 
     * // Get first 10 Relationsses
     * const relationsses = await prisma.relationss.findMany({ take: 10 })
     * 
     * // Only select the `foodid`
     * const relationssWithFoodidOnly = await prisma.relationss.findMany({ select: { foodid: true } })
     * 
    **/
    findMany<T extends relationssFindManyArgs>(
      args?: SelectSubset<T, relationssFindManyArgs>
    ): Prisma.PrismaPromise<Array<relationssGetPayload<T>>>

    /**
     * Create a Relationss.
     * @param {relationssCreateArgs} args - Arguments to create a Relationss.
     * @example
     * // Create one Relationss
     * const Relationss = await prisma.relationss.create({
     *   data: {
     *     // ... data to create a Relationss
     *   }
     * })
     * 
    **/
    create<T extends relationssCreateArgs>(
      args: SelectSubset<T, relationssCreateArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Create many Relationsses.
     *     @param {relationssCreateManyArgs} args - Arguments to create many Relationsses.
     *     @example
     *     // Create many Relationsses
     *     const relationss = await prisma.relationss.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends relationssCreateManyArgs>(
      args?: SelectSubset<T, relationssCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Relationss.
     * @param {relationssDeleteArgs} args - Arguments to delete one Relationss.
     * @example
     * // Delete one Relationss
     * const Relationss = await prisma.relationss.delete({
     *   where: {
     *     // ... filter to delete one Relationss
     *   }
     * })
     * 
    **/
    delete<T extends relationssDeleteArgs>(
      args: SelectSubset<T, relationssDeleteArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Update one Relationss.
     * @param {relationssUpdateArgs} args - Arguments to update one Relationss.
     * @example
     * // Update one Relationss
     * const relationss = await prisma.relationss.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends relationssUpdateArgs>(
      args: SelectSubset<T, relationssUpdateArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Delete zero or more Relationsses.
     * @param {relationssDeleteManyArgs} args - Arguments to filter Relationsses to delete.
     * @example
     * // Delete a few Relationsses
     * const { count } = await prisma.relationss.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends relationssDeleteManyArgs>(
      args?: SelectSubset<T, relationssDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relationsses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationssUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relationsses
     * const relationss = await prisma.relationss.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends relationssUpdateManyArgs>(
      args: SelectSubset<T, relationssUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Relationss.
     * @param {relationssUpsertArgs} args - Arguments to update or create a Relationss.
     * @example
     * // Update or create a Relationss
     * const relationss = await prisma.relationss.upsert({
     *   create: {
     *     // ... data to create a Relationss
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relationss we want to update
     *   }
     * })
    **/
    upsert<T extends relationssUpsertArgs>(
      args: SelectSubset<T, relationssUpsertArgs>
    ): Prisma__relationssClient<relationssGetPayload<T>>

    /**
     * Count the number of Relationsses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationssCountArgs} args - Arguments to filter Relationsses to count.
     * @example
     * // Count the number of Relationsses
     * const count = await prisma.relationss.count({
     *   where: {
     *     // ... the filter for the Relationsses we want to count
     *   }
     * })
    **/
    count<T extends relationssCountArgs>(
      args?: Subset<T, relationssCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationssCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relationss.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationssAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationssAggregateArgs>(args: Subset<T, RelationssAggregateArgs>): Prisma.PrismaPromise<GetRelationssAggregateType<T>>

    /**
     * Group by Relationss.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationssGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationssGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationssGroupByArgs['orderBy'] }
        : { orderBy?: RelationssGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationssGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationssGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for relationss.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__relationssClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * relationss base type for findUnique actions
   */
  export type relationssFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter, which relationss to fetch.
     */
    where: relationssWhereUniqueInput
  }

  /**
   * relationss findUnique
   */
  export interface relationssFindUniqueArgs extends relationssFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * relationss findUniqueOrThrow
   */
  export type relationssFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter, which relationss to fetch.
     */
    where: relationssWhereUniqueInput
  }


  /**
   * relationss base type for findFirst actions
   */
  export type relationssFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter, which relationss to fetch.
     */
    where?: relationssWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relationsses to fetch.
     */
    orderBy?: Enumerable<relationssOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for relationsses.
     */
    cursor?: relationssWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relationsses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relationsses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of relationsses.
     */
    distinct?: Enumerable<RelationssScalarFieldEnum>
  }

  /**
   * relationss findFirst
   */
  export interface relationssFindFirstArgs extends relationssFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * relationss findFirstOrThrow
   */
  export type relationssFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter, which relationss to fetch.
     */
    where?: relationssWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relationsses to fetch.
     */
    orderBy?: Enumerable<relationssOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for relationsses.
     */
    cursor?: relationssWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relationsses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relationsses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of relationsses.
     */
    distinct?: Enumerable<RelationssScalarFieldEnum>
  }


  /**
   * relationss findMany
   */
  export type relationssFindManyArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter, which relationsses to fetch.
     */
    where?: relationssWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relationsses to fetch.
     */
    orderBy?: Enumerable<relationssOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing relationsses.
     */
    cursor?: relationssWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relationsses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relationsses.
     */
    skip?: number
    distinct?: Enumerable<RelationssScalarFieldEnum>
  }


  /**
   * relationss create
   */
  export type relationssCreateArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * The data needed to create a relationss.
     */
    data: XOR<relationssCreateInput, relationssUncheckedCreateInput>
  }


  /**
   * relationss createMany
   */
  export type relationssCreateManyArgs = {
    /**
     * The data used to create many relationsses.
     */
    data: Enumerable<relationssCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * relationss update
   */
  export type relationssUpdateArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * The data needed to update a relationss.
     */
    data: XOR<relationssUpdateInput, relationssUncheckedUpdateInput>
    /**
     * Choose, which relationss to update.
     */
    where: relationssWhereUniqueInput
  }


  /**
   * relationss updateMany
   */
  export type relationssUpdateManyArgs = {
    /**
     * The data used to update relationsses.
     */
    data: XOR<relationssUpdateManyMutationInput, relationssUncheckedUpdateManyInput>
    /**
     * Filter which relationsses to update
     */
    where?: relationssWhereInput
  }


  /**
   * relationss upsert
   */
  export type relationssUpsertArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * The filter to search for the relationss to update in case it exists.
     */
    where: relationssWhereUniqueInput
    /**
     * In case the relationss found by the `where` argument doesn't exist, create a new relationss with this data.
     */
    create: XOR<relationssCreateInput, relationssUncheckedCreateInput>
    /**
     * In case the relationss was found with the provided `where` argument, update it with this data.
     */
    update: XOR<relationssUpdateInput, relationssUncheckedUpdateInput>
  }


  /**
   * relationss delete
   */
  export type relationssDeleteArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
    /**
     * Filter which relationss to delete.
     */
    where: relationssWhereUniqueInput
  }


  /**
   * relationss deleteMany
   */
  export type relationssDeleteManyArgs = {
    /**
     * Filter which relationsses to delete
     */
    where?: relationssWhereInput
  }


  /**
   * relationss without action
   */
  export type relationssArgs = {
    /**
     * Select specific fields to fetch from the relationss
     */
    select?: relationssSelect | null
  }



  /**
   * Model reports
   */


  export type AggregateReports = {
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  export type ReportsAvgAggregateOutputType = {
    foodid: number | null
    number_sold: number | null
    inventory: number | null
  }

  export type ReportsSumAggregateOutputType = {
    foodid: number | null
    number_sold: number | null
    inventory: number | null
  }

  export type ReportsMinAggregateOutputType = {
    foodid: number | null
    name: string | null
    number_sold: number | null
    inventory: number | null
    date: Date | null
  }

  export type ReportsMaxAggregateOutputType = {
    foodid: number | null
    name: string | null
    number_sold: number | null
    inventory: number | null
    date: Date | null
  }

  export type ReportsCountAggregateOutputType = {
    foodid: number
    name: number
    number_sold: number
    inventory: number
    date: number
    _all: number
  }


  export type ReportsAvgAggregateInputType = {
    foodid?: true
    number_sold?: true
    inventory?: true
  }

  export type ReportsSumAggregateInputType = {
    foodid?: true
    number_sold?: true
    inventory?: true
  }

  export type ReportsMinAggregateInputType = {
    foodid?: true
    name?: true
    number_sold?: true
    inventory?: true
    date?: true
  }

  export type ReportsMaxAggregateInputType = {
    foodid?: true
    name?: true
    number_sold?: true
    inventory?: true
    date?: true
  }

  export type ReportsCountAggregateInputType = {
    foodid?: true
    name?: true
    number_sold?: true
    inventory?: true
    date?: true
    _all?: true
  }

  export type ReportsAggregateArgs = {
    /**
     * Filter which reports to aggregate.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reports
    **/
    _count?: true | ReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsMaxAggregateInputType
  }

  export type GetReportsAggregateType<T extends ReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReports[P]>
      : GetScalarType<T[P], AggregateReports[P]>
  }




  export type ReportsGroupByArgs = {
    where?: reportsWhereInput
    orderBy?: Enumerable<reportsOrderByWithAggregationInput>
    by: ReportsScalarFieldEnum[]
    having?: reportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsCountAggregateInputType | true
    _avg?: ReportsAvgAggregateInputType
    _sum?: ReportsSumAggregateInputType
    _min?: ReportsMinAggregateInputType
    _max?: ReportsMaxAggregateInputType
  }


  export type ReportsGroupByOutputType = {
    foodid: number
    name: string
    number_sold: number
    inventory: number
    date: Date | null
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  type GetReportsGroupByPayload<T extends ReportsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsGroupByOutputType[P]>
        }
      >
    >


  export type reportsSelect = {
    foodid?: boolean
    name?: boolean
    number_sold?: boolean
    inventory?: boolean
    date?: boolean
  }


  export type reportsGetPayload<S extends boolean | null | undefined | reportsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? reports :
    S extends undefined ? never :
    S extends { include: any } & (reportsArgs | reportsFindManyArgs)
    ? reports 
    : S extends { select: any } & (reportsArgs | reportsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof reports ? reports[P] : never
  } 
      : reports


  type reportsCountArgs = 
    Omit<reportsFindManyArgs, 'select' | 'include'> & {
      select?: ReportsCountAggregateInputType | true
    }

  export interface reportsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Reports that matches the filter.
     * @param {reportsFindUniqueArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reportsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reportsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reports'> extends True ? Prisma__reportsClient<reportsGetPayload<T>> : Prisma__reportsClient<reportsGetPayload<T> | null, null>

    /**
     * Find one Reports that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {reportsFindUniqueOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reportsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reportsFindUniqueOrThrowArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Find the first Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reportsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reportsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reports'> extends True ? Prisma__reportsClient<reportsGetPayload<T>> : Prisma__reportsClient<reportsGetPayload<T> | null, null>

    /**
     * Find the first Reports that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reportsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reportsFindFirstOrThrowArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.reports.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.reports.findMany({ take: 10 })
     * 
     * // Only select the `foodid`
     * const reportsWithFoodidOnly = await prisma.reports.findMany({ select: { foodid: true } })
     * 
    **/
    findMany<T extends reportsFindManyArgs>(
      args?: SelectSubset<T, reportsFindManyArgs>
    ): Prisma.PrismaPromise<Array<reportsGetPayload<T>>>

    /**
     * Create a Reports.
     * @param {reportsCreateArgs} args - Arguments to create a Reports.
     * @example
     * // Create one Reports
     * const Reports = await prisma.reports.create({
     *   data: {
     *     // ... data to create a Reports
     *   }
     * })
     * 
    **/
    create<T extends reportsCreateArgs>(
      args: SelectSubset<T, reportsCreateArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Create many Reports.
     *     @param {reportsCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const reports = await prisma.reports.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reportsCreateManyArgs>(
      args?: SelectSubset<T, reportsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reports.
     * @param {reportsDeleteArgs} args - Arguments to delete one Reports.
     * @example
     * // Delete one Reports
     * const Reports = await prisma.reports.delete({
     *   where: {
     *     // ... filter to delete one Reports
     *   }
     * })
     * 
    **/
    delete<T extends reportsDeleteArgs>(
      args: SelectSubset<T, reportsDeleteArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Update one Reports.
     * @param {reportsUpdateArgs} args - Arguments to update one Reports.
     * @example
     * // Update one Reports
     * const reports = await prisma.reports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reportsUpdateArgs>(
      args: SelectSubset<T, reportsUpdateArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Delete zero or more Reports.
     * @param {reportsDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.reports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reportsDeleteManyArgs>(
      args?: SelectSubset<T, reportsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const reports = await prisma.reports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reportsUpdateManyArgs>(
      args: SelectSubset<T, reportsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reports.
     * @param {reportsUpsertArgs} args - Arguments to update or create a Reports.
     * @example
     * // Update or create a Reports
     * const reports = await prisma.reports.upsert({
     *   create: {
     *     // ... data to create a Reports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reports we want to update
     *   }
     * })
    **/
    upsert<T extends reportsUpsertArgs>(
      args: SelectSubset<T, reportsUpsertArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.reports.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends reportsCountArgs>(
      args?: Subset<T, reportsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsAggregateArgs>(args: Subset<T, ReportsAggregateArgs>): Prisma.PrismaPromise<GetReportsAggregateType<T>>

    /**
     * Group by Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportsGroupByArgs['orderBy'] }
        : { orderBy?: ReportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reportsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reports base type for findUnique actions
   */
  export type reportsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }

  /**
   * reports findUnique
   */
  export interface reportsFindUniqueArgs extends reportsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reports findUniqueOrThrow
   */
  export type reportsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter, which reports to fetch.
     */
    where: reportsWhereUniqueInput
  }


  /**
   * reports base type for findFirst actions
   */
  export type reportsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: Enumerable<ReportsScalarFieldEnum>
  }

  /**
   * reports findFirst
   */
  export interface reportsFindFirstArgs extends reportsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reports findFirstOrThrow
   */
  export type reportsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     */
    distinct?: Enumerable<ReportsScalarFieldEnum>
  }


  /**
   * reports findMany
   */
  export type reportsFindManyArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter, which reports to fetch.
     */
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     */
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reports.
     */
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     */
    skip?: number
    distinct?: Enumerable<ReportsScalarFieldEnum>
  }


  /**
   * reports create
   */
  export type reportsCreateArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * The data needed to create a reports.
     */
    data: XOR<reportsCreateInput, reportsUncheckedCreateInput>
  }


  /**
   * reports createMany
   */
  export type reportsCreateManyArgs = {
    /**
     * The data used to create many reports.
     */
    data: Enumerable<reportsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reports update
   */
  export type reportsUpdateArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * The data needed to update a reports.
     */
    data: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
    /**
     * Choose, which reports to update.
     */
    where: reportsWhereUniqueInput
  }


  /**
   * reports updateMany
   */
  export type reportsUpdateManyArgs = {
    /**
     * The data used to update reports.
     */
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyInput>
    /**
     * Filter which reports to update
     */
    where?: reportsWhereInput
  }


  /**
   * reports upsert
   */
  export type reportsUpsertArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * The filter to search for the reports to update in case it exists.
     */
    where: reportsWhereUniqueInput
    /**
     * In case the reports found by the `where` argument doesn't exist, create a new reports with this data.
     */
    create: XOR<reportsCreateInput, reportsUncheckedCreateInput>
    /**
     * In case the reports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
  }


  /**
   * reports delete
   */
  export type reportsDeleteArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
    /**
     * Filter which reports to delete.
     */
    where: reportsWhereUniqueInput
  }


  /**
   * reports deleteMany
   */
  export type reportsDeleteManyArgs = {
    /**
     * Filter which reports to delete
     */
    where?: reportsWhereInput
  }


  /**
   * reports without action
   */
  export type reportsArgs = {
    /**
     * Select specific fields to fetch from the reports
     */
    select?: reportsSelect | null
  }



  /**
   * Model sales
   */


  export type AggregateSales = {
    _count: SalesCountAggregateOutputType | null
    _avg: SalesAvgAggregateOutputType | null
    _sum: SalesSumAggregateOutputType | null
    _min: SalesMinAggregateOutputType | null
    _max: SalesMaxAggregateOutputType | null
  }

  export type SalesAvgAggregateOutputType = {
    itemid: number | null
    units_sold: number | null
    cost_per_unit: number | null
    revenue_per_unit: number | null
    weight_per_unit: number | null
  }

  export type SalesSumAggregateOutputType = {
    itemid: number | null
    units_sold: number | null
    cost_per_unit: number | null
    revenue_per_unit: number | null
    weight_per_unit: number | null
  }

  export type SalesMinAggregateOutputType = {
    itemid: number | null
    units_sold: number | null
    cost_per_unit: number | null
    revenue_per_unit: number | null
    weight_per_unit: number | null
    name: string | null
  }

  export type SalesMaxAggregateOutputType = {
    itemid: number | null
    units_sold: number | null
    cost_per_unit: number | null
    revenue_per_unit: number | null
    weight_per_unit: number | null
    name: string | null
  }

  export type SalesCountAggregateOutputType = {
    itemid: number
    units_sold: number
    cost_per_unit: number
    revenue_per_unit: number
    weight_per_unit: number
    name: number
    _all: number
  }


  export type SalesAvgAggregateInputType = {
    itemid?: true
    units_sold?: true
    cost_per_unit?: true
    revenue_per_unit?: true
    weight_per_unit?: true
  }

  export type SalesSumAggregateInputType = {
    itemid?: true
    units_sold?: true
    cost_per_unit?: true
    revenue_per_unit?: true
    weight_per_unit?: true
  }

  export type SalesMinAggregateInputType = {
    itemid?: true
    units_sold?: true
    cost_per_unit?: true
    revenue_per_unit?: true
    weight_per_unit?: true
    name?: true
  }

  export type SalesMaxAggregateInputType = {
    itemid?: true
    units_sold?: true
    cost_per_unit?: true
    revenue_per_unit?: true
    weight_per_unit?: true
    name?: true
  }

  export type SalesCountAggregateInputType = {
    itemid?: true
    units_sold?: true
    cost_per_unit?: true
    revenue_per_unit?: true
    weight_per_unit?: true
    name?: true
    _all?: true
  }

  export type SalesAggregateArgs = {
    /**
     * Filter which sales to aggregate.
     */
    where?: salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<salesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sales
    **/
    _count?: true | SalesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalesMaxAggregateInputType
  }

  export type GetSalesAggregateType<T extends SalesAggregateArgs> = {
        [P in keyof T & keyof AggregateSales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSales[P]>
      : GetScalarType<T[P], AggregateSales[P]>
  }




  export type SalesGroupByArgs = {
    where?: salesWhereInput
    orderBy?: Enumerable<salesOrderByWithAggregationInput>
    by: SalesScalarFieldEnum[]
    having?: salesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalesCountAggregateInputType | true
    _avg?: SalesAvgAggregateInputType
    _sum?: SalesSumAggregateInputType
    _min?: SalesMinAggregateInputType
    _max?: SalesMaxAggregateInputType
  }


  export type SalesGroupByOutputType = {
    itemid: number
    units_sold: number | null
    cost_per_unit: number | null
    revenue_per_unit: number | null
    weight_per_unit: number | null
    name: string | null
    _count: SalesCountAggregateOutputType | null
    _avg: SalesAvgAggregateOutputType | null
    _sum: SalesSumAggregateOutputType | null
    _min: SalesMinAggregateOutputType | null
    _max: SalesMaxAggregateOutputType | null
  }

  type GetSalesGroupByPayload<T extends SalesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SalesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalesGroupByOutputType[P]>
            : GetScalarType<T[P], SalesGroupByOutputType[P]>
        }
      >
    >


  export type salesSelect = {
    itemid?: boolean
    units_sold?: boolean
    cost_per_unit?: boolean
    revenue_per_unit?: boolean
    weight_per_unit?: boolean
    name?: boolean
  }


  export type salesGetPayload<S extends boolean | null | undefined | salesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? sales :
    S extends undefined ? never :
    S extends { include: any } & (salesArgs | salesFindManyArgs)
    ? sales 
    : S extends { select: any } & (salesArgs | salesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof sales ? sales[P] : never
  } 
      : sales


  type salesCountArgs = 
    Omit<salesFindManyArgs, 'select' | 'include'> & {
      select?: SalesCountAggregateInputType | true
    }

  export interface salesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sales that matches the filter.
     * @param {salesFindUniqueArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, salesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sales'> extends True ? Prisma__salesClient<salesGetPayload<T>> : Prisma__salesClient<salesGetPayload<T> | null, null>

    /**
     * Find one Sales that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {salesFindUniqueOrThrowArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends salesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, salesFindUniqueOrThrowArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Find the first Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salesFindFirstArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, salesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sales'> extends True ? Prisma__salesClient<salesGetPayload<T>> : Prisma__salesClient<salesGetPayload<T> | null, null>

    /**
     * Find the first Sales that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salesFindFirstOrThrowArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends salesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, salesFindFirstOrThrowArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sales.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sales.findMany({ take: 10 })
     * 
     * // Only select the `itemid`
     * const salesWithItemidOnly = await prisma.sales.findMany({ select: { itemid: true } })
     * 
    **/
    findMany<T extends salesFindManyArgs>(
      args?: SelectSubset<T, salesFindManyArgs>
    ): Prisma.PrismaPromise<Array<salesGetPayload<T>>>

    /**
     * Create a Sales.
     * @param {salesCreateArgs} args - Arguments to create a Sales.
     * @example
     * // Create one Sales
     * const Sales = await prisma.sales.create({
     *   data: {
     *     // ... data to create a Sales
     *   }
     * })
     * 
    **/
    create<T extends salesCreateArgs>(
      args: SelectSubset<T, salesCreateArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Create many Sales.
     *     @param {salesCreateManyArgs} args - Arguments to create many Sales.
     *     @example
     *     // Create many Sales
     *     const sales = await prisma.sales.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salesCreateManyArgs>(
      args?: SelectSubset<T, salesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sales.
     * @param {salesDeleteArgs} args - Arguments to delete one Sales.
     * @example
     * // Delete one Sales
     * const Sales = await prisma.sales.delete({
     *   where: {
     *     // ... filter to delete one Sales
     *   }
     * })
     * 
    **/
    delete<T extends salesDeleteArgs>(
      args: SelectSubset<T, salesDeleteArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Update one Sales.
     * @param {salesUpdateArgs} args - Arguments to update one Sales.
     * @example
     * // Update one Sales
     * const sales = await prisma.sales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salesUpdateArgs>(
      args: SelectSubset<T, salesUpdateArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Delete zero or more Sales.
     * @param {salesDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salesDeleteManyArgs>(
      args?: SelectSubset<T, salesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sales = await prisma.sales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salesUpdateManyArgs>(
      args: SelectSubset<T, salesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sales.
     * @param {salesUpsertArgs} args - Arguments to update or create a Sales.
     * @example
     * // Update or create a Sales
     * const sales = await prisma.sales.upsert({
     *   create: {
     *     // ... data to create a Sales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sales we want to update
     *   }
     * })
    **/
    upsert<T extends salesUpsertArgs>(
      args: SelectSubset<T, salesUpsertArgs>
    ): Prisma__salesClient<salesGetPayload<T>>

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salesCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sales.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends salesCountArgs>(
      args?: Subset<T, salesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalesAggregateArgs>(args: Subset<T, SalesAggregateArgs>): Prisma.PrismaPromise<GetSalesAggregateType<T>>

    /**
     * Group by Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalesGroupByArgs['orderBy'] }
        : { orderBy?: SalesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__salesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sales base type for findUnique actions
   */
  export type salesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter, which sales to fetch.
     */
    where: salesWhereUniqueInput
  }

  /**
   * sales findUnique
   */
  export interface salesFindUniqueArgs extends salesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sales findUniqueOrThrow
   */
  export type salesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter, which sales to fetch.
     */
    where: salesWhereUniqueInput
  }


  /**
   * sales base type for findFirst actions
   */
  export type salesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter, which sales to fetch.
     */
    where?: salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<salesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sales.
     */
    cursor?: salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sales.
     */
    distinct?: Enumerable<SalesScalarFieldEnum>
  }

  /**
   * sales findFirst
   */
  export interface salesFindFirstArgs extends salesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sales findFirstOrThrow
   */
  export type salesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter, which sales to fetch.
     */
    where?: salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<salesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sales.
     */
    cursor?: salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sales.
     */
    distinct?: Enumerable<SalesScalarFieldEnum>
  }


  /**
   * sales findMany
   */
  export type salesFindManyArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter, which sales to fetch.
     */
    where?: salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<salesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sales.
     */
    cursor?: salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    distinct?: Enumerable<SalesScalarFieldEnum>
  }


  /**
   * sales create
   */
  export type salesCreateArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * The data needed to create a sales.
     */
    data: XOR<salesCreateInput, salesUncheckedCreateInput>
  }


  /**
   * sales createMany
   */
  export type salesCreateManyArgs = {
    /**
     * The data used to create many sales.
     */
    data: Enumerable<salesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sales update
   */
  export type salesUpdateArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * The data needed to update a sales.
     */
    data: XOR<salesUpdateInput, salesUncheckedUpdateInput>
    /**
     * Choose, which sales to update.
     */
    where: salesWhereUniqueInput
  }


  /**
   * sales updateMany
   */
  export type salesUpdateManyArgs = {
    /**
     * The data used to update sales.
     */
    data: XOR<salesUpdateManyMutationInput, salesUncheckedUpdateManyInput>
    /**
     * Filter which sales to update
     */
    where?: salesWhereInput
  }


  /**
   * sales upsert
   */
  export type salesUpsertArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * The filter to search for the sales to update in case it exists.
     */
    where: salesWhereUniqueInput
    /**
     * In case the sales found by the `where` argument doesn't exist, create a new sales with this data.
     */
    create: XOR<salesCreateInput, salesUncheckedCreateInput>
    /**
     * In case the sales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<salesUpdateInput, salesUncheckedUpdateInput>
  }


  /**
   * sales delete
   */
  export type salesDeleteArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
    /**
     * Filter which sales to delete.
     */
    where: salesWhereUniqueInput
  }


  /**
   * sales deleteMany
   */
  export type salesDeleteManyArgs = {
    /**
     * Filter which sales to delete
     */
    where?: salesWhereInput
  }


  /**
   * sales without action
   */
  export type salesArgs = {
    /**
     * Select specific fields to fetch from the sales
     */
    select?: salesSelect | null
  }



  /**
   * Model teammembers
   */


  export type AggregateTeammembers = {
    _count: TeammembersCountAggregateOutputType | null
    _avg: TeammembersAvgAggregateOutputType | null
    _sum: TeammembersSumAggregateOutputType | null
    _min: TeammembersMinAggregateOutputType | null
    _max: TeammembersMaxAggregateOutputType | null
  }

  export type TeammembersAvgAggregateOutputType = {
    section: number | null
  }

  export type TeammembersSumAggregateOutputType = {
    section: number | null
  }

  export type TeammembersMinAggregateOutputType = {
    student_name: string | null
    section: number | null
    favorite_movie: string | null
  }

  export type TeammembersMaxAggregateOutputType = {
    student_name: string | null
    section: number | null
    favorite_movie: string | null
  }

  export type TeammembersCountAggregateOutputType = {
    student_name: number
    section: number
    favorite_movie: number
    _all: number
  }


  export type TeammembersAvgAggregateInputType = {
    section?: true
  }

  export type TeammembersSumAggregateInputType = {
    section?: true
  }

  export type TeammembersMinAggregateInputType = {
    student_name?: true
    section?: true
    favorite_movie?: true
  }

  export type TeammembersMaxAggregateInputType = {
    student_name?: true
    section?: true
    favorite_movie?: true
  }

  export type TeammembersCountAggregateInputType = {
    student_name?: true
    section?: true
    favorite_movie?: true
    _all?: true
  }

  export type TeammembersAggregateArgs = {
    /**
     * Filter which teammembers to aggregate.
     */
    where?: teammembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teammembers to fetch.
     */
    orderBy?: Enumerable<teammembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teammembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teammembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teammembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teammembers
    **/
    _count?: true | TeammembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeammembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeammembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeammembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeammembersMaxAggregateInputType
  }

  export type GetTeammembersAggregateType<T extends TeammembersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeammembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeammembers[P]>
      : GetScalarType<T[P], AggregateTeammembers[P]>
  }




  export type TeammembersGroupByArgs = {
    where?: teammembersWhereInput
    orderBy?: Enumerable<teammembersOrderByWithAggregationInput>
    by: TeammembersScalarFieldEnum[]
    having?: teammembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeammembersCountAggregateInputType | true
    _avg?: TeammembersAvgAggregateInputType
    _sum?: TeammembersSumAggregateInputType
    _min?: TeammembersMinAggregateInputType
    _max?: TeammembersMaxAggregateInputType
  }


  export type TeammembersGroupByOutputType = {
    student_name: string
    section: number | null
    favorite_movie: string | null
    _count: TeammembersCountAggregateOutputType | null
    _avg: TeammembersAvgAggregateOutputType | null
    _sum: TeammembersSumAggregateOutputType | null
    _min: TeammembersMinAggregateOutputType | null
    _max: TeammembersMaxAggregateOutputType | null
  }

  type GetTeammembersGroupByPayload<T extends TeammembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TeammembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeammembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeammembersGroupByOutputType[P]>
            : GetScalarType<T[P], TeammembersGroupByOutputType[P]>
        }
      >
    >


  export type teammembersSelect = {
    student_name?: boolean
    section?: boolean
    favorite_movie?: boolean
  }


  export type teammembersGetPayload<S extends boolean | null | undefined | teammembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? teammembers :
    S extends undefined ? never :
    S extends { include: any } & (teammembersArgs | teammembersFindManyArgs)
    ? teammembers 
    : S extends { select: any } & (teammembersArgs | teammembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof teammembers ? teammembers[P] : never
  } 
      : teammembers


  type teammembersCountArgs = 
    Omit<teammembersFindManyArgs, 'select' | 'include'> & {
      select?: TeammembersCountAggregateInputType | true
    }

  export interface teammembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Teammembers that matches the filter.
     * @param {teammembersFindUniqueArgs} args - Arguments to find a Teammembers
     * @example
     * // Get one Teammembers
     * const teammembers = await prisma.teammembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends teammembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, teammembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'teammembers'> extends True ? Prisma__teammembersClient<teammembersGetPayload<T>> : Prisma__teammembersClient<teammembersGetPayload<T> | null, null>

    /**
     * Find one Teammembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {teammembersFindUniqueOrThrowArgs} args - Arguments to find a Teammembers
     * @example
     * // Get one Teammembers
     * const teammembers = await prisma.teammembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends teammembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, teammembersFindUniqueOrThrowArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Find the first Teammembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teammembersFindFirstArgs} args - Arguments to find a Teammembers
     * @example
     * // Get one Teammembers
     * const teammembers = await prisma.teammembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends teammembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, teammembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'teammembers'> extends True ? Prisma__teammembersClient<teammembersGetPayload<T>> : Prisma__teammembersClient<teammembersGetPayload<T> | null, null>

    /**
     * Find the first Teammembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teammembersFindFirstOrThrowArgs} args - Arguments to find a Teammembers
     * @example
     * // Get one Teammembers
     * const teammembers = await prisma.teammembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends teammembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, teammembersFindFirstOrThrowArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Find zero or more Teammembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teammembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teammembers
     * const teammembers = await prisma.teammembers.findMany()
     * 
     * // Get first 10 Teammembers
     * const teammembers = await prisma.teammembers.findMany({ take: 10 })
     * 
     * // Only select the `student_name`
     * const teammembersWithStudent_nameOnly = await prisma.teammembers.findMany({ select: { student_name: true } })
     * 
    **/
    findMany<T extends teammembersFindManyArgs>(
      args?: SelectSubset<T, teammembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<teammembersGetPayload<T>>>

    /**
     * Create a Teammembers.
     * @param {teammembersCreateArgs} args - Arguments to create a Teammembers.
     * @example
     * // Create one Teammembers
     * const Teammembers = await prisma.teammembers.create({
     *   data: {
     *     // ... data to create a Teammembers
     *   }
     * })
     * 
    **/
    create<T extends teammembersCreateArgs>(
      args: SelectSubset<T, teammembersCreateArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Create many Teammembers.
     *     @param {teammembersCreateManyArgs} args - Arguments to create many Teammembers.
     *     @example
     *     // Create many Teammembers
     *     const teammembers = await prisma.teammembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends teammembersCreateManyArgs>(
      args?: SelectSubset<T, teammembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teammembers.
     * @param {teammembersDeleteArgs} args - Arguments to delete one Teammembers.
     * @example
     * // Delete one Teammembers
     * const Teammembers = await prisma.teammembers.delete({
     *   where: {
     *     // ... filter to delete one Teammembers
     *   }
     * })
     * 
    **/
    delete<T extends teammembersDeleteArgs>(
      args: SelectSubset<T, teammembersDeleteArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Update one Teammembers.
     * @param {teammembersUpdateArgs} args - Arguments to update one Teammembers.
     * @example
     * // Update one Teammembers
     * const teammembers = await prisma.teammembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends teammembersUpdateArgs>(
      args: SelectSubset<T, teammembersUpdateArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Delete zero or more Teammembers.
     * @param {teammembersDeleteManyArgs} args - Arguments to filter Teammembers to delete.
     * @example
     * // Delete a few Teammembers
     * const { count } = await prisma.teammembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends teammembersDeleteManyArgs>(
      args?: SelectSubset<T, teammembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teammembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teammembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teammembers
     * const teammembers = await prisma.teammembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends teammembersUpdateManyArgs>(
      args: SelectSubset<T, teammembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teammembers.
     * @param {teammembersUpsertArgs} args - Arguments to update or create a Teammembers.
     * @example
     * // Update or create a Teammembers
     * const teammembers = await prisma.teammembers.upsert({
     *   create: {
     *     // ... data to create a Teammembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teammembers we want to update
     *   }
     * })
    **/
    upsert<T extends teammembersUpsertArgs>(
      args: SelectSubset<T, teammembersUpsertArgs>
    ): Prisma__teammembersClient<teammembersGetPayload<T>>

    /**
     * Count the number of Teammembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teammembersCountArgs} args - Arguments to filter Teammembers to count.
     * @example
     * // Count the number of Teammembers
     * const count = await prisma.teammembers.count({
     *   where: {
     *     // ... the filter for the Teammembers we want to count
     *   }
     * })
    **/
    count<T extends teammembersCountArgs>(
      args?: Subset<T, teammembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeammembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teammembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeammembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeammembersAggregateArgs>(args: Subset<T, TeammembersAggregateArgs>): Prisma.PrismaPromise<GetTeammembersAggregateType<T>>

    /**
     * Group by Teammembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeammembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeammembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeammembersGroupByArgs['orderBy'] }
        : { orderBy?: TeammembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeammembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeammembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for teammembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__teammembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * teammembers base type for findUnique actions
   */
  export type teammembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter, which teammembers to fetch.
     */
    where: teammembersWhereUniqueInput
  }

  /**
   * teammembers findUnique
   */
  export interface teammembersFindUniqueArgs extends teammembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * teammembers findUniqueOrThrow
   */
  export type teammembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter, which teammembers to fetch.
     */
    where: teammembersWhereUniqueInput
  }


  /**
   * teammembers base type for findFirst actions
   */
  export type teammembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter, which teammembers to fetch.
     */
    where?: teammembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teammembers to fetch.
     */
    orderBy?: Enumerable<teammembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teammembers.
     */
    cursor?: teammembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teammembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teammembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teammembers.
     */
    distinct?: Enumerable<TeammembersScalarFieldEnum>
  }

  /**
   * teammembers findFirst
   */
  export interface teammembersFindFirstArgs extends teammembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * teammembers findFirstOrThrow
   */
  export type teammembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter, which teammembers to fetch.
     */
    where?: teammembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teammembers to fetch.
     */
    orderBy?: Enumerable<teammembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teammembers.
     */
    cursor?: teammembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teammembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teammembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teammembers.
     */
    distinct?: Enumerable<TeammembersScalarFieldEnum>
  }


  /**
   * teammembers findMany
   */
  export type teammembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter, which teammembers to fetch.
     */
    where?: teammembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teammembers to fetch.
     */
    orderBy?: Enumerable<teammembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teammembers.
     */
    cursor?: teammembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teammembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teammembers.
     */
    skip?: number
    distinct?: Enumerable<TeammembersScalarFieldEnum>
  }


  /**
   * teammembers create
   */
  export type teammembersCreateArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * The data needed to create a teammembers.
     */
    data: XOR<teammembersCreateInput, teammembersUncheckedCreateInput>
  }


  /**
   * teammembers createMany
   */
  export type teammembersCreateManyArgs = {
    /**
     * The data used to create many teammembers.
     */
    data: Enumerable<teammembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * teammembers update
   */
  export type teammembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * The data needed to update a teammembers.
     */
    data: XOR<teammembersUpdateInput, teammembersUncheckedUpdateInput>
    /**
     * Choose, which teammembers to update.
     */
    where: teammembersWhereUniqueInput
  }


  /**
   * teammembers updateMany
   */
  export type teammembersUpdateManyArgs = {
    /**
     * The data used to update teammembers.
     */
    data: XOR<teammembersUpdateManyMutationInput, teammembersUncheckedUpdateManyInput>
    /**
     * Filter which teammembers to update
     */
    where?: teammembersWhereInput
  }


  /**
   * teammembers upsert
   */
  export type teammembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * The filter to search for the teammembers to update in case it exists.
     */
    where: teammembersWhereUniqueInput
    /**
     * In case the teammembers found by the `where` argument doesn't exist, create a new teammembers with this data.
     */
    create: XOR<teammembersCreateInput, teammembersUncheckedCreateInput>
    /**
     * In case the teammembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teammembersUpdateInput, teammembersUncheckedUpdateInput>
  }


  /**
   * teammembers delete
   */
  export type teammembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
    /**
     * Filter which teammembers to delete.
     */
    where: teammembersWhereUniqueInput
  }


  /**
   * teammembers deleteMany
   */
  export type teammembersDeleteManyArgs = {
    /**
     * Filter which teammembers to delete
     */
    where?: teammembersWhereInput
  }


  /**
   * teammembers without action
   */
  export type teammembersArgs = {
    /**
     * Select specific fields to fetch from the teammembers
     */
    select?: teammembersSelect | null
  }



  /**
   * Model menuimages
   */


  export type AggregateMenuimages = {
    _count: MenuimagesCountAggregateOutputType | null
    _avg: MenuimagesAvgAggregateOutputType | null
    _sum: MenuimagesSumAggregateOutputType | null
    _min: MenuimagesMinAggregateOutputType | null
    _max: MenuimagesMaxAggregateOutputType | null
  }

  export type MenuimagesAvgAggregateOutputType = {
    foodid: number | null
  }

  export type MenuimagesSumAggregateOutputType = {
    foodid: number | null
  }

  export type MenuimagesMinAggregateOutputType = {
    foodid: number | null
    imagesrc: string | null
    name: string | null
  }

  export type MenuimagesMaxAggregateOutputType = {
    foodid: number | null
    imagesrc: string | null
    name: string | null
  }

  export type MenuimagesCountAggregateOutputType = {
    foodid: number
    imagesrc: number
    name: number
    _all: number
  }


  export type MenuimagesAvgAggregateInputType = {
    foodid?: true
  }

  export type MenuimagesSumAggregateInputType = {
    foodid?: true
  }

  export type MenuimagesMinAggregateInputType = {
    foodid?: true
    imagesrc?: true
    name?: true
  }

  export type MenuimagesMaxAggregateInputType = {
    foodid?: true
    imagesrc?: true
    name?: true
  }

  export type MenuimagesCountAggregateInputType = {
    foodid?: true
    imagesrc?: true
    name?: true
    _all?: true
  }

  export type MenuimagesAggregateArgs = {
    /**
     * Filter which menuimages to aggregate.
     */
    where?: menuimagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menuimages to fetch.
     */
    orderBy?: Enumerable<menuimagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: menuimagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menuimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menuimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned menuimages
    **/
    _count?: true | MenuimagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuimagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuimagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuimagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuimagesMaxAggregateInputType
  }

  export type GetMenuimagesAggregateType<T extends MenuimagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuimages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuimages[P]>
      : GetScalarType<T[P], AggregateMenuimages[P]>
  }




  export type MenuimagesGroupByArgs = {
    where?: menuimagesWhereInput
    orderBy?: Enumerable<menuimagesOrderByWithAggregationInput>
    by: MenuimagesScalarFieldEnum[]
    having?: menuimagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuimagesCountAggregateInputType | true
    _avg?: MenuimagesAvgAggregateInputType
    _sum?: MenuimagesSumAggregateInputType
    _min?: MenuimagesMinAggregateInputType
    _max?: MenuimagesMaxAggregateInputType
  }


  export type MenuimagesGroupByOutputType = {
    foodid: number
    imagesrc: string | null
    name: string | null
    _count: MenuimagesCountAggregateOutputType | null
    _avg: MenuimagesAvgAggregateOutputType | null
    _sum: MenuimagesSumAggregateOutputType | null
    _min: MenuimagesMinAggregateOutputType | null
    _max: MenuimagesMaxAggregateOutputType | null
  }

  type GetMenuimagesGroupByPayload<T extends MenuimagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MenuimagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuimagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuimagesGroupByOutputType[P]>
            : GetScalarType<T[P], MenuimagesGroupByOutputType[P]>
        }
      >
    >


  export type menuimagesSelect = {
    foodid?: boolean
    imagesrc?: boolean
    name?: boolean
  }


  export type menuimagesGetPayload<S extends boolean | null | undefined | menuimagesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? menuimages :
    S extends undefined ? never :
    S extends { include: any } & (menuimagesArgs | menuimagesFindManyArgs)
    ? menuimages 
    : S extends { select: any } & (menuimagesArgs | menuimagesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof menuimages ? menuimages[P] : never
  } 
      : menuimages


  type menuimagesCountArgs = 
    Omit<menuimagesFindManyArgs, 'select' | 'include'> & {
      select?: MenuimagesCountAggregateInputType | true
    }

  export interface menuimagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Menuimages that matches the filter.
     * @param {menuimagesFindUniqueArgs} args - Arguments to find a Menuimages
     * @example
     * // Get one Menuimages
     * const menuimages = await prisma.menuimages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends menuimagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, menuimagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'menuimages'> extends True ? Prisma__menuimagesClient<menuimagesGetPayload<T>> : Prisma__menuimagesClient<menuimagesGetPayload<T> | null, null>

    /**
     * Find one Menuimages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {menuimagesFindUniqueOrThrowArgs} args - Arguments to find a Menuimages
     * @example
     * // Get one Menuimages
     * const menuimages = await prisma.menuimages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends menuimagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, menuimagesFindUniqueOrThrowArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Find the first Menuimages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuimagesFindFirstArgs} args - Arguments to find a Menuimages
     * @example
     * // Get one Menuimages
     * const menuimages = await prisma.menuimages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends menuimagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, menuimagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'menuimages'> extends True ? Prisma__menuimagesClient<menuimagesGetPayload<T>> : Prisma__menuimagesClient<menuimagesGetPayload<T> | null, null>

    /**
     * Find the first Menuimages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuimagesFindFirstOrThrowArgs} args - Arguments to find a Menuimages
     * @example
     * // Get one Menuimages
     * const menuimages = await prisma.menuimages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends menuimagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, menuimagesFindFirstOrThrowArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Find zero or more Menuimages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuimagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menuimages
     * const menuimages = await prisma.menuimages.findMany()
     * 
     * // Get first 10 Menuimages
     * const menuimages = await prisma.menuimages.findMany({ take: 10 })
     * 
     * // Only select the `foodid`
     * const menuimagesWithFoodidOnly = await prisma.menuimages.findMany({ select: { foodid: true } })
     * 
    **/
    findMany<T extends menuimagesFindManyArgs>(
      args?: SelectSubset<T, menuimagesFindManyArgs>
    ): Prisma.PrismaPromise<Array<menuimagesGetPayload<T>>>

    /**
     * Create a Menuimages.
     * @param {menuimagesCreateArgs} args - Arguments to create a Menuimages.
     * @example
     * // Create one Menuimages
     * const Menuimages = await prisma.menuimages.create({
     *   data: {
     *     // ... data to create a Menuimages
     *   }
     * })
     * 
    **/
    create<T extends menuimagesCreateArgs>(
      args: SelectSubset<T, menuimagesCreateArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Create many Menuimages.
     *     @param {menuimagesCreateManyArgs} args - Arguments to create many Menuimages.
     *     @example
     *     // Create many Menuimages
     *     const menuimages = await prisma.menuimages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends menuimagesCreateManyArgs>(
      args?: SelectSubset<T, menuimagesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menuimages.
     * @param {menuimagesDeleteArgs} args - Arguments to delete one Menuimages.
     * @example
     * // Delete one Menuimages
     * const Menuimages = await prisma.menuimages.delete({
     *   where: {
     *     // ... filter to delete one Menuimages
     *   }
     * })
     * 
    **/
    delete<T extends menuimagesDeleteArgs>(
      args: SelectSubset<T, menuimagesDeleteArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Update one Menuimages.
     * @param {menuimagesUpdateArgs} args - Arguments to update one Menuimages.
     * @example
     * // Update one Menuimages
     * const menuimages = await prisma.menuimages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends menuimagesUpdateArgs>(
      args: SelectSubset<T, menuimagesUpdateArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Delete zero or more Menuimages.
     * @param {menuimagesDeleteManyArgs} args - Arguments to filter Menuimages to delete.
     * @example
     * // Delete a few Menuimages
     * const { count } = await prisma.menuimages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends menuimagesDeleteManyArgs>(
      args?: SelectSubset<T, menuimagesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menuimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuimagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menuimages
     * const menuimages = await prisma.menuimages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends menuimagesUpdateManyArgs>(
      args: SelectSubset<T, menuimagesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menuimages.
     * @param {menuimagesUpsertArgs} args - Arguments to update or create a Menuimages.
     * @example
     * // Update or create a Menuimages
     * const menuimages = await prisma.menuimages.upsert({
     *   create: {
     *     // ... data to create a Menuimages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menuimages we want to update
     *   }
     * })
    **/
    upsert<T extends menuimagesUpsertArgs>(
      args: SelectSubset<T, menuimagesUpsertArgs>
    ): Prisma__menuimagesClient<menuimagesGetPayload<T>>

    /**
     * Count the number of Menuimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuimagesCountArgs} args - Arguments to filter Menuimages to count.
     * @example
     * // Count the number of Menuimages
     * const count = await prisma.menuimages.count({
     *   where: {
     *     // ... the filter for the Menuimages we want to count
     *   }
     * })
    **/
    count<T extends menuimagesCountArgs>(
      args?: Subset<T, menuimagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuimagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menuimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuimagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuimagesAggregateArgs>(args: Subset<T, MenuimagesAggregateArgs>): Prisma.PrismaPromise<GetMenuimagesAggregateType<T>>

    /**
     * Group by Menuimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuimagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuimagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuimagesGroupByArgs['orderBy'] }
        : { orderBy?: MenuimagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuimagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuimagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for menuimages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__menuimagesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * menuimages base type for findUnique actions
   */
  export type menuimagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter, which menuimages to fetch.
     */
    where: menuimagesWhereUniqueInput
  }

  /**
   * menuimages findUnique
   */
  export interface menuimagesFindUniqueArgs extends menuimagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menuimages findUniqueOrThrow
   */
  export type menuimagesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter, which menuimages to fetch.
     */
    where: menuimagesWhereUniqueInput
  }


  /**
   * menuimages base type for findFirst actions
   */
  export type menuimagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter, which menuimages to fetch.
     */
    where?: menuimagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menuimages to fetch.
     */
    orderBy?: Enumerable<menuimagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menuimages.
     */
    cursor?: menuimagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menuimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menuimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menuimages.
     */
    distinct?: Enumerable<MenuimagesScalarFieldEnum>
  }

  /**
   * menuimages findFirst
   */
  export interface menuimagesFindFirstArgs extends menuimagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menuimages findFirstOrThrow
   */
  export type menuimagesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter, which menuimages to fetch.
     */
    where?: menuimagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menuimages to fetch.
     */
    orderBy?: Enumerable<menuimagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menuimages.
     */
    cursor?: menuimagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menuimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menuimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menuimages.
     */
    distinct?: Enumerable<MenuimagesScalarFieldEnum>
  }


  /**
   * menuimages findMany
   */
  export type menuimagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter, which menuimages to fetch.
     */
    where?: menuimagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menuimages to fetch.
     */
    orderBy?: Enumerable<menuimagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing menuimages.
     */
    cursor?: menuimagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menuimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menuimages.
     */
    skip?: number
    distinct?: Enumerable<MenuimagesScalarFieldEnum>
  }


  /**
   * menuimages create
   */
  export type menuimagesCreateArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * The data needed to create a menuimages.
     */
    data: XOR<menuimagesCreateInput, menuimagesUncheckedCreateInput>
  }


  /**
   * menuimages createMany
   */
  export type menuimagesCreateManyArgs = {
    /**
     * The data used to create many menuimages.
     */
    data: Enumerable<menuimagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * menuimages update
   */
  export type menuimagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * The data needed to update a menuimages.
     */
    data: XOR<menuimagesUpdateInput, menuimagesUncheckedUpdateInput>
    /**
     * Choose, which menuimages to update.
     */
    where: menuimagesWhereUniqueInput
  }


  /**
   * menuimages updateMany
   */
  export type menuimagesUpdateManyArgs = {
    /**
     * The data used to update menuimages.
     */
    data: XOR<menuimagesUpdateManyMutationInput, menuimagesUncheckedUpdateManyInput>
    /**
     * Filter which menuimages to update
     */
    where?: menuimagesWhereInput
  }


  /**
   * menuimages upsert
   */
  export type menuimagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * The filter to search for the menuimages to update in case it exists.
     */
    where: menuimagesWhereUniqueInput
    /**
     * In case the menuimages found by the `where` argument doesn't exist, create a new menuimages with this data.
     */
    create: XOR<menuimagesCreateInput, menuimagesUncheckedCreateInput>
    /**
     * In case the menuimages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<menuimagesUpdateInput, menuimagesUncheckedUpdateInput>
  }


  /**
   * menuimages delete
   */
  export type menuimagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
    /**
     * Filter which menuimages to delete.
     */
    where: menuimagesWhereUniqueInput
  }


  /**
   * menuimages deleteMany
   */
  export type menuimagesDeleteManyArgs = {
    /**
     * Filter which menuimages to delete
     */
    where?: menuimagesWhereInput
  }


  /**
   * menuimages without action
   */
  export type menuimagesArgs = {
    /**
     * Select specific fields to fetch from the menuimages
     */
    select?: menuimagesSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Ingredients_tableScalarFieldEnum: {
    name: 'name',
    itemid: 'itemid',
    num_in_stock: 'num_in_stock',
    last_date_restocked: 'last_date_restocked',
    min_stock_allowed: 'min_stock_allowed'
  };

  export type Ingredients_tableScalarFieldEnum = (typeof Ingredients_tableScalarFieldEnum)[keyof typeof Ingredients_tableScalarFieldEnum]


  export const Menu_items_tableScalarFieldEnum: {
    foodid: 'foodid',
    name: 'name',
    price: 'price',
    category: 'category',
    num_sold: 'num_sold',
    num_in_stock: 'num_in_stock',
    min_in_stock: 'min_in_stock'
  };

  export type Menu_items_tableScalarFieldEnum = (typeof Menu_items_tableScalarFieldEnum)[keyof typeof Menu_items_tableScalarFieldEnum]


  export const MenuimagesScalarFieldEnum: {
    foodid: 'foodid',
    imagesrc: 'imagesrc',
    name: 'name'
  };

  export type MenuimagesScalarFieldEnum = (typeof MenuimagesScalarFieldEnum)[keyof typeof MenuimagesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RelationssScalarFieldEnum: {
    foodid: 'foodid',
    itemid: 'itemid'
  };

  export type RelationssScalarFieldEnum = (typeof RelationssScalarFieldEnum)[keyof typeof RelationssScalarFieldEnum]


  export const ReportsScalarFieldEnum: {
    foodid: 'foodid',
    name: 'name',
    number_sold: 'number_sold',
    inventory: 'inventory',
    date: 'date'
  };

  export type ReportsScalarFieldEnum = (typeof ReportsScalarFieldEnum)[keyof typeof ReportsScalarFieldEnum]


  export const SalesScalarFieldEnum: {
    itemid: 'itemid',
    units_sold: 'units_sold',
    cost_per_unit: 'cost_per_unit',
    revenue_per_unit: 'revenue_per_unit',
    weight_per_unit: 'weight_per_unit',
    name: 'name'
  };

  export type SalesScalarFieldEnum = (typeof SalesScalarFieldEnum)[keyof typeof SalesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TeammembersScalarFieldEnum: {
    student_name: 'student_name',
    section: 'section',
    favorite_movie: 'favorite_movie'
  };

  export type TeammembersScalarFieldEnum = (typeof TeammembersScalarFieldEnum)[keyof typeof TeammembersScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type ingredients_tableWhereInput = {
    AND?: Enumerable<ingredients_tableWhereInput>
    OR?: Enumerable<ingredients_tableWhereInput>
    NOT?: Enumerable<ingredients_tableWhereInput>
    name?: StringNullableFilter | string | null
    itemid?: IntFilter | number
    num_in_stock?: IntNullableFilter | number | null
    last_date_restocked?: DateTimeNullableFilter | Date | string | null
    min_stock_allowed?: IntNullableFilter | number | null
  }

  export type ingredients_tableOrderByWithRelationInput = {
    name?: SortOrder
    itemid?: SortOrder
    num_in_stock?: SortOrder
    last_date_restocked?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type ingredients_tableWhereUniqueInput = {
    itemid?: number
  }

  export type ingredients_tableOrderByWithAggregationInput = {
    name?: SortOrder
    itemid?: SortOrder
    num_in_stock?: SortOrder
    last_date_restocked?: SortOrder
    min_stock_allowed?: SortOrder
    _count?: ingredients_tableCountOrderByAggregateInput
    _avg?: ingredients_tableAvgOrderByAggregateInput
    _max?: ingredients_tableMaxOrderByAggregateInput
    _min?: ingredients_tableMinOrderByAggregateInput
    _sum?: ingredients_tableSumOrderByAggregateInput
  }

  export type ingredients_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ingredients_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<ingredients_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ingredients_tableScalarWhereWithAggregatesInput>
    name?: StringNullableWithAggregatesFilter | string | null
    itemid?: IntWithAggregatesFilter | number
    num_in_stock?: IntNullableWithAggregatesFilter | number | null
    last_date_restocked?: DateTimeNullableWithAggregatesFilter | Date | string | null
    min_stock_allowed?: IntNullableWithAggregatesFilter | number | null
  }

  export type menu_items_tableWhereInput = {
    AND?: Enumerable<menu_items_tableWhereInput>
    OR?: Enumerable<menu_items_tableWhereInput>
    NOT?: Enumerable<menu_items_tableWhereInput>
    foodid?: IntFilter | number
    name?: StringNullableFilter | string | null
    price?: FloatNullableFilter | number | null
    category?: StringNullableFilter | string | null
    num_sold?: IntNullableFilter | number | null
    num_in_stock?: IntNullableFilter | number | null
    min_in_stock?: IntNullableFilter | number | null
  }

  export type menu_items_tableOrderByWithRelationInput = {
    foodid?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type menu_items_tableWhereUniqueInput = {
    foodid?: number
  }

  export type menu_items_tableOrderByWithAggregationInput = {
    foodid?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
    _count?: menu_items_tableCountOrderByAggregateInput
    _avg?: menu_items_tableAvgOrderByAggregateInput
    _max?: menu_items_tableMaxOrderByAggregateInput
    _min?: menu_items_tableMinOrderByAggregateInput
    _sum?: menu_items_tableSumOrderByAggregateInput
  }

  export type menu_items_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<menu_items_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<menu_items_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<menu_items_tableScalarWhereWithAggregatesInput>
    foodid?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    price?: FloatNullableWithAggregatesFilter | number | null
    category?: StringNullableWithAggregatesFilter | string | null
    num_sold?: IntNullableWithAggregatesFilter | number | null
    num_in_stock?: IntNullableWithAggregatesFilter | number | null
    min_in_stock?: IntNullableWithAggregatesFilter | number | null
  }

  export type relationssWhereInput = {
    AND?: Enumerable<relationssWhereInput>
    OR?: Enumerable<relationssWhereInput>
    NOT?: Enumerable<relationssWhereInput>
    foodid?: IntFilter | number
    itemid?: IntNullableFilter | number | null
  }

  export type relationssOrderByWithRelationInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type relationssWhereUniqueInput = {
    foodid?: number
  }

  export type relationssOrderByWithAggregationInput = {
    foodid?: SortOrder
    itemid?: SortOrder
    _count?: relationssCountOrderByAggregateInput
    _avg?: relationssAvgOrderByAggregateInput
    _max?: relationssMaxOrderByAggregateInput
    _min?: relationssMinOrderByAggregateInput
    _sum?: relationssSumOrderByAggregateInput
  }

  export type relationssScalarWhereWithAggregatesInput = {
    AND?: Enumerable<relationssScalarWhereWithAggregatesInput>
    OR?: Enumerable<relationssScalarWhereWithAggregatesInput>
    NOT?: Enumerable<relationssScalarWhereWithAggregatesInput>
    foodid?: IntWithAggregatesFilter | number
    itemid?: IntNullableWithAggregatesFilter | number | null
  }

  export type reportsWhereInput = {
    AND?: Enumerable<reportsWhereInput>
    OR?: Enumerable<reportsWhereInput>
    NOT?: Enumerable<reportsWhereInput>
    foodid?: IntFilter | number
    name?: StringFilter | string
    number_sold?: IntFilter | number
    inventory?: IntFilter | number
    date?: DateTimeNullableFilter | Date | string | null
  }

  export type reportsOrderByWithRelationInput = {
    foodid?: SortOrder
    name?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
    date?: SortOrder
  }

  export type reportsWhereUniqueInput = {
    foodid?: number
  }

  export type reportsOrderByWithAggregationInput = {
    foodid?: SortOrder
    name?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
    date?: SortOrder
    _count?: reportsCountOrderByAggregateInput
    _avg?: reportsAvgOrderByAggregateInput
    _max?: reportsMaxOrderByAggregateInput
    _min?: reportsMinOrderByAggregateInput
    _sum?: reportsSumOrderByAggregateInput
  }

  export type reportsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reportsScalarWhereWithAggregatesInput>
    OR?: Enumerable<reportsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reportsScalarWhereWithAggregatesInput>
    foodid?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    number_sold?: IntWithAggregatesFilter | number
    inventory?: IntWithAggregatesFilter | number
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type salesWhereInput = {
    AND?: Enumerable<salesWhereInput>
    OR?: Enumerable<salesWhereInput>
    NOT?: Enumerable<salesWhereInput>
    itemid?: IntFilter | number
    units_sold?: IntNullableFilter | number | null
    cost_per_unit?: FloatNullableFilter | number | null
    revenue_per_unit?: FloatNullableFilter | number | null
    weight_per_unit?: FloatNullableFilter | number | null
    name?: StringNullableFilter | string | null
  }

  export type salesOrderByWithRelationInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
    name?: SortOrder
  }

  export type salesWhereUniqueInput = {
    itemid?: number
  }

  export type salesOrderByWithAggregationInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
    name?: SortOrder
    _count?: salesCountOrderByAggregateInput
    _avg?: salesAvgOrderByAggregateInput
    _max?: salesMaxOrderByAggregateInput
    _min?: salesMinOrderByAggregateInput
    _sum?: salesSumOrderByAggregateInput
  }

  export type salesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<salesScalarWhereWithAggregatesInput>
    OR?: Enumerable<salesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<salesScalarWhereWithAggregatesInput>
    itemid?: IntWithAggregatesFilter | number
    units_sold?: IntNullableWithAggregatesFilter | number | null
    cost_per_unit?: FloatNullableWithAggregatesFilter | number | null
    revenue_per_unit?: FloatNullableWithAggregatesFilter | number | null
    weight_per_unit?: FloatNullableWithAggregatesFilter | number | null
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type teammembersWhereInput = {
    AND?: Enumerable<teammembersWhereInput>
    OR?: Enumerable<teammembersWhereInput>
    NOT?: Enumerable<teammembersWhereInput>
    student_name?: StringFilter | string
    section?: IntNullableFilter | number | null
    favorite_movie?: StringNullableFilter | string | null
  }

  export type teammembersOrderByWithRelationInput = {
    student_name?: SortOrder
    section?: SortOrder
    favorite_movie?: SortOrder
  }

  export type teammembersWhereUniqueInput = {
    student_name?: string
  }

  export type teammembersOrderByWithAggregationInput = {
    student_name?: SortOrder
    section?: SortOrder
    favorite_movie?: SortOrder
    _count?: teammembersCountOrderByAggregateInput
    _avg?: teammembersAvgOrderByAggregateInput
    _max?: teammembersMaxOrderByAggregateInput
    _min?: teammembersMinOrderByAggregateInput
    _sum?: teammembersSumOrderByAggregateInput
  }

  export type teammembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<teammembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<teammembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<teammembersScalarWhereWithAggregatesInput>
    student_name?: StringWithAggregatesFilter | string
    section?: IntNullableWithAggregatesFilter | number | null
    favorite_movie?: StringNullableWithAggregatesFilter | string | null
  }

  export type menuimagesWhereInput = {
    AND?: Enumerable<menuimagesWhereInput>
    OR?: Enumerable<menuimagesWhereInput>
    NOT?: Enumerable<menuimagesWhereInput>
    foodid?: IntFilter | number
    imagesrc?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
  }

  export type menuimagesOrderByWithRelationInput = {
    foodid?: SortOrder
    imagesrc?: SortOrder
    name?: SortOrder
  }

  export type menuimagesWhereUniqueInput = {
    foodid?: number
  }

  export type menuimagesOrderByWithAggregationInput = {
    foodid?: SortOrder
    imagesrc?: SortOrder
    name?: SortOrder
    _count?: menuimagesCountOrderByAggregateInput
    _avg?: menuimagesAvgOrderByAggregateInput
    _max?: menuimagesMaxOrderByAggregateInput
    _min?: menuimagesMinOrderByAggregateInput
    _sum?: menuimagesSumOrderByAggregateInput
  }

  export type menuimagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<menuimagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<menuimagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<menuimagesScalarWhereWithAggregatesInput>
    foodid?: IntWithAggregatesFilter | number
    imagesrc?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type ingredients_tableCreateInput = {
    name?: string | null
    itemid: number
    num_in_stock?: number | null
    last_date_restocked?: Date | string | null
    min_stock_allowed?: number | null
  }

  export type ingredients_tableUncheckedCreateInput = {
    name?: string | null
    itemid: number
    num_in_stock?: number | null
    last_date_restocked?: Date | string | null
    min_stock_allowed?: number | null
  }

  export type ingredients_tableUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    itemid?: IntFieldUpdateOperationsInput | number
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    last_date_restocked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    min_stock_allowed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ingredients_tableUncheckedUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    itemid?: IntFieldUpdateOperationsInput | number
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    last_date_restocked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    min_stock_allowed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ingredients_tableCreateManyInput = {
    name?: string | null
    itemid: number
    num_in_stock?: number | null
    last_date_restocked?: Date | string | null
    min_stock_allowed?: number | null
  }

  export type ingredients_tableUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    itemid?: IntFieldUpdateOperationsInput | number
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    last_date_restocked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    min_stock_allowed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ingredients_tableUncheckedUpdateManyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    itemid?: IntFieldUpdateOperationsInput | number
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    last_date_restocked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    min_stock_allowed?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menu_items_tableCreateInput = {
    foodid: number
    name?: string | null
    price?: number | null
    category?: string | null
    num_sold?: number | null
    num_in_stock?: number | null
    min_in_stock?: number | null
  }

  export type menu_items_tableUncheckedCreateInput = {
    foodid: number
    name?: string | null
    price?: number | null
    category?: string | null
    num_sold?: number | null
    num_in_stock?: number | null
    min_in_stock?: number | null
  }

  export type menu_items_tableUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    num_sold?: NullableIntFieldUpdateOperationsInput | number | null
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    min_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menu_items_tableUncheckedUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    num_sold?: NullableIntFieldUpdateOperationsInput | number | null
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    min_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menu_items_tableCreateManyInput = {
    foodid: number
    name?: string | null
    price?: number | null
    category?: string | null
    num_sold?: number | null
    num_in_stock?: number | null
    min_in_stock?: number | null
  }

  export type menu_items_tableUpdateManyMutationInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    num_sold?: NullableIntFieldUpdateOperationsInput | number | null
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    min_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menu_items_tableUncheckedUpdateManyInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    num_sold?: NullableIntFieldUpdateOperationsInput | number | null
    num_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
    min_in_stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type relationssCreateInput = {
    foodid: number
    itemid?: number | null
  }

  export type relationssUncheckedCreateInput = {
    foodid: number
    itemid?: number | null
  }

  export type relationssUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    itemid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type relationssUncheckedUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    itemid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type relationssCreateManyInput = {
    foodid: number
    itemid?: number | null
  }

  export type relationssUpdateManyMutationInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    itemid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type relationssUncheckedUpdateManyInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    itemid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type reportsCreateInput = {
    foodid: number
    name: string
    number_sold: number
    inventory: number
    date?: Date | string | null
  }

  export type reportsUncheckedCreateInput = {
    foodid: number
    name: string
    number_sold: number
    inventory: number
    date?: Date | string | null
  }

  export type reportsUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number_sold?: IntFieldUpdateOperationsInput | number
    inventory?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number_sold?: IntFieldUpdateOperationsInput | number
    inventory?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsCreateManyInput = {
    foodid: number
    name: string
    number_sold: number
    inventory: number
    date?: Date | string | null
  }

  export type reportsUpdateManyMutationInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number_sold?: IntFieldUpdateOperationsInput | number
    inventory?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number_sold?: IntFieldUpdateOperationsInput | number
    inventory?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type salesCreateInput = {
    itemid: number
    units_sold?: number | null
    cost_per_unit?: number | null
    revenue_per_unit?: number | null
    weight_per_unit?: number | null
    name?: string | null
  }

  export type salesUncheckedCreateInput = {
    itemid: number
    units_sold?: number | null
    cost_per_unit?: number | null
    revenue_per_unit?: number | null
    weight_per_unit?: number | null
    name?: string | null
  }

  export type salesUpdateInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    units_sold?: NullableIntFieldUpdateOperationsInput | number | null
    cost_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    weight_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type salesUncheckedUpdateInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    units_sold?: NullableIntFieldUpdateOperationsInput | number | null
    cost_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    weight_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type salesCreateManyInput = {
    itemid: number
    units_sold?: number | null
    cost_per_unit?: number | null
    revenue_per_unit?: number | null
    weight_per_unit?: number | null
    name?: string | null
  }

  export type salesUpdateManyMutationInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    units_sold?: NullableIntFieldUpdateOperationsInput | number | null
    cost_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    weight_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type salesUncheckedUpdateManyInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    units_sold?: NullableIntFieldUpdateOperationsInput | number | null
    cost_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    weight_per_unit?: NullableFloatFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type teammembersCreateInput = {
    student_name: string
    section?: number | null
    favorite_movie?: string | null
  }

  export type teammembersUncheckedCreateInput = {
    student_name: string
    section?: number | null
    favorite_movie?: string | null
  }

  export type teammembersUpdateInput = {
    student_name?: StringFieldUpdateOperationsInput | string
    section?: NullableIntFieldUpdateOperationsInput | number | null
    favorite_movie?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type teammembersUncheckedUpdateInput = {
    student_name?: StringFieldUpdateOperationsInput | string
    section?: NullableIntFieldUpdateOperationsInput | number | null
    favorite_movie?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type teammembersCreateManyInput = {
    student_name: string
    section?: number | null
    favorite_movie?: string | null
  }

  export type teammembersUpdateManyMutationInput = {
    student_name?: StringFieldUpdateOperationsInput | string
    section?: NullableIntFieldUpdateOperationsInput | number | null
    favorite_movie?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type teammembersUncheckedUpdateManyInput = {
    student_name?: StringFieldUpdateOperationsInput | string
    section?: NullableIntFieldUpdateOperationsInput | number | null
    favorite_movie?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menuimagesCreateInput = {
    foodid: number
    imagesrc?: string | null
    name?: string | null
  }

  export type menuimagesUncheckedCreateInput = {
    foodid: number
    imagesrc?: string | null
    name?: string | null
  }

  export type menuimagesUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    imagesrc?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menuimagesUncheckedUpdateInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    imagesrc?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menuimagesCreateManyInput = {
    foodid: number
    imagesrc?: string | null
    name?: string | null
  }

  export type menuimagesUpdateManyMutationInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    imagesrc?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menuimagesUncheckedUpdateManyInput = {
    foodid?: IntFieldUpdateOperationsInput | number
    imagesrc?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ingredients_tableCountOrderByAggregateInput = {
    name?: SortOrder
    itemid?: SortOrder
    num_in_stock?: SortOrder
    last_date_restocked?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type ingredients_tableAvgOrderByAggregateInput = {
    itemid?: SortOrder
    num_in_stock?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type ingredients_tableMaxOrderByAggregateInput = {
    name?: SortOrder
    itemid?: SortOrder
    num_in_stock?: SortOrder
    last_date_restocked?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type ingredients_tableMinOrderByAggregateInput = {
    name?: SortOrder
    itemid?: SortOrder
    num_in_stock?: SortOrder
    last_date_restocked?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type ingredients_tableSumOrderByAggregateInput = {
    itemid?: SortOrder
    num_in_stock?: SortOrder
    min_stock_allowed?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type menu_items_tableCountOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type menu_items_tableAvgOrderByAggregateInput = {
    foodid?: SortOrder
    price?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type menu_items_tableMaxOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type menu_items_tableMinOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type menu_items_tableSumOrderByAggregateInput = {
    foodid?: SortOrder
    price?: SortOrder
    num_sold?: SortOrder
    num_in_stock?: SortOrder
    min_in_stock?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type relationssCountOrderByAggregateInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type relationssAvgOrderByAggregateInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type relationssMaxOrderByAggregateInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type relationssMinOrderByAggregateInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type relationssSumOrderByAggregateInput = {
    foodid?: SortOrder
    itemid?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type reportsCountOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
    date?: SortOrder
  }

  export type reportsAvgOrderByAggregateInput = {
    foodid?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
  }

  export type reportsMaxOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
    date?: SortOrder
  }

  export type reportsMinOrderByAggregateInput = {
    foodid?: SortOrder
    name?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
    date?: SortOrder
  }

  export type reportsSumOrderByAggregateInput = {
    foodid?: SortOrder
    number_sold?: SortOrder
    inventory?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type salesCountOrderByAggregateInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
    name?: SortOrder
  }

  export type salesAvgOrderByAggregateInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
  }

  export type salesMaxOrderByAggregateInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
    name?: SortOrder
  }

  export type salesMinOrderByAggregateInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
    name?: SortOrder
  }

  export type salesSumOrderByAggregateInput = {
    itemid?: SortOrder
    units_sold?: SortOrder
    cost_per_unit?: SortOrder
    revenue_per_unit?: SortOrder
    weight_per_unit?: SortOrder
  }

  export type teammembersCountOrderByAggregateInput = {
    student_name?: SortOrder
    section?: SortOrder
    favorite_movie?: SortOrder
  }

  export type teammembersAvgOrderByAggregateInput = {
    section?: SortOrder
  }

  export type teammembersMaxOrderByAggregateInput = {
    student_name?: SortOrder
    section?: SortOrder
    favorite_movie?: SortOrder
  }

  export type teammembersMinOrderByAggregateInput = {
    student_name?: SortOrder
    section?: SortOrder
    favorite_movie?: SortOrder
  }

  export type teammembersSumOrderByAggregateInput = {
    section?: SortOrder
  }

  export type menuimagesCountOrderByAggregateInput = {
    foodid?: SortOrder
    imagesrc?: SortOrder
    name?: SortOrder
  }

  export type menuimagesAvgOrderByAggregateInput = {
    foodid?: SortOrder
  }

  export type menuimagesMaxOrderByAggregateInput = {
    foodid?: SortOrder
    imagesrc?: SortOrder
    name?: SortOrder
  }

  export type menuimagesMinOrderByAggregateInput = {
    foodid?: SortOrder
    imagesrc?: SortOrder
    name?: SortOrder
  }

  export type menuimagesSumOrderByAggregateInput = {
    foodid?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}